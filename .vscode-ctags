!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHITECTURE_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
COMPILER_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	file:
COMPILER_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CXX_STD	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
C_DIALECT	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	file:
C_DIALECT	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	file:
C_DIALECT	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	file:
Codec	tree/297.serialize-and-deserialize-binary-tree.cpp	/^class Codec {$/;"	c	file:
Codec	tree/449.serialize-and-deserialize-bst.cpp	/^class Codec {$/;"	c	file:
Count	UnionFind/Unionfind.cc	/^  int Count() const {$/;"	f	class:UF
DEC	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	file:
DEC	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
ExamRoom	datastruct/ExamRoom.cc	/^  ExamRoom(int N) {$/;"	f	class:ExamRoom
ExamRoom	datastruct/ExamRoom.cc	/^class ExamRoom {$/;"	c	file:
Find	UnionFind/Unionfind.cc	/^  int Find(int x) {$/;"	f	class:UF
FindKthNode	link/19.remove-nth-node-from-end-of-list.cpp	/^  ListNode* FindKthNode(ListNode* head, int k) {$/;"	f	class:Solution	file:
FreqStack	Design/895.maximum-frequency-stack.cpp	/^  FreqStack() {$/;"	f	class:FreqStack
FreqStack	Design/895.maximum-frequency-stack.cpp	/^class FreqStack {$/;"	c	file:
HEX	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	file:
HEX	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	file:
LFUCache	Design/460.lfu-cache.cpp	/^  LFUCache(int capacity) {$/;"	f	class:LFUCache
LFUCache	Design/460.lfu-cache.cpp	/^class LFUCache {$/;"	c	file:
LRUCache	Design/146.lru-cache.cpp	/^  LRUCache(int capacity)$/;"	f	class:LRUCache
LRUCache	Design/146.lru-cache.cpp	/^class LRUCache {$/;"	c	file:
ListNode	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/147.insertion-sort-list.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/147.insertion-sort-list.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/147.insertion-sort-list.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/147.insertion-sort-list.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/160.intersection-of-two-linked-lists.cpp	/^  ListNode(int x) : val(x), next(NULL) {$/;"	f	struct:ListNode
ListNode	link/160.intersection-of-two-linked-lists.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/19.remove-nth-node-from-end-of-list.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/19.remove-nth-node-from-end-of-list.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/19.remove-nth-node-from-end-of-list.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/19.remove-nth-node-from-end-of-list.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/21.merge-two-sorted-lists.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/21.merge-two-sorted-lists.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/21.merge-two-sorted-lists.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/21.merge-two-sorted-lists.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/23.merge-k-sorted-lists.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/23.merge-k-sorted-lists.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/23.merge-k-sorted-lists.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/23.merge-k-sorted-lists.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/234.palindrome-linked-list.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/234.palindrome-linked-list.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/234.palindrome-linked-list.cpp	/^  ListNode(int x, ListNode *next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/234.palindrome-linked-list.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/25.reverse-nodes-in-k-group.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/25.reverse-nodes-in-k-group.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/25.reverse-nodes-in-k-group.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/25.reverse-nodes-in-k-group.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/61.rotate-list.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/61.rotate-list.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/61.rotate-list.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/61.rotate-list.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/83.remove-duplicates-from-sorted-list.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/83.remove-duplicates-from-sorted-list.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/83.remove-duplicates-from-sorted-list.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/83.remove-duplicates-from-sorted-list.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/876.middle-of-the-linked-list.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/876.middle-of-the-linked-list.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/876.middle-of-the-linked-list.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/876.middle-of-the-linked-list.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/92.reverse-linked-list-ii.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/92.reverse-linked-list-ii.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	link/92.reverse-linked-list-ii.cpp	/^  ListNode(int x, ListNode* next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	link/92.reverse-linked-list-ii.cpp	/^struct ListNode {$/;"	s	file:
ListNode	link/linkNode.h	/^  ListNode() : val(0), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	link/linkNode.h	/^  ListNode(int x) : val(x), next(nullptr) {}$/;"	f	struct:ListNode
ListNode	link/linkNode.h	/^  ListNode(int x, ListNode *next) : val(x), next(next) {}$/;"	f	struct:ListNode
ListNode	link/linkNode.h	/^struct ListNode {$/;"	s
ListNode	random/382.linked-list-random-node.cpp	/^  ListNode() : val(0), next(nullptr) {$/;"	f	struct:ListNode
ListNode	random/382.linked-list-random-node.cpp	/^  ListNode(int x) : val(x), next(nullptr) {$/;"	f	struct:ListNode
ListNode	random/382.linked-list-random-node.cpp	/^  ListNode(int x, ListNode *next) : val(x), next(next) {$/;"	f	struct:ListNode
ListNode	random/382.linked-list-random-node.cpp	/^struct ListNode {$/;"	s	file:
MaxHeap	heap/designheap.cc	/^  MaxHeap(int cap) {$/;"	f	class:MaxHeap
MaxHeap	heap/designheap.cc	/^class MaxHeap {$/;"	c	file:
MedianFinder	heap/295.find-median-from-data-stream.cpp	/^  MedianFinder() {$/;"	f	class:MedianFinder
MedianFinder	heap/295.find-median-from-data-stream.cpp	/^class MedianFinder {$/;"	c	file:
MinStack	stack/155.min-stack.cpp	/^  MinStack() {$/;"	f	class:MinStack
MinStack	stack/155.min-stack.cpp	/^class MinStack {$/;"	c	file:
MonotonicQueue	datastruct/239.sliding-window-maximum.cpp	/^  class MonotonicQueue {$/;"	c	class:Solution	file:
MonotonicQueue	datastruct/MonotonicQueue.cc	/^class MonotonicQueue {$/;"	c	file:
MyQueue	stack/232.implement-queue-using-stacks.cpp	/^  MyQueue() {$/;"	f	class:MyQueue
MyQueue	stack/232.implement-queue-using-stacks.cpp	/^class MyQueue {$/;"	c	file:
MyStack	stack/225.implement_stack_using_queues.cpp	/^    MyStack() {$/;"	f	class:MyStack
MyStack	stack/225.implement_stack_using_queues.cpp	/^class MyStack {$/;"	c	file:
Nan	divide_and_conquer/53.maximum-subarray.cpp	/^  const int Nan = -1;$/;"	m	class:Solution	file:
NestedInteger	tree/341.flatten-nested-list-iterator.cpp	/^class NestedInteger {$/;"	c	file:
NestedIterator	stack/341.flatten-nested-list-iterator.cpp	/^  NestedIterator(vector<NestedInteger> &nestedList) {$/;"	f	class:NestedIterator
NestedIterator	stack/341.flatten-nested-list-iterator.cpp	/^class NestedIterator {$/;"	c	file:
NestedIterator	tree/341.flatten-nested-list-iterator.cpp	/^  NestedIterator(std::vector<NestedInteger> &nestedList) {$/;"	f	class:NestedIterator
NestedIterator	tree/341.flatten-nested-list-iterator.cpp	/^class NestedIterator {$/;"	c	file:
Node	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  Node() : val(0), left(NULL), right(NULL), next(NULL) {$/;"	f	class:Node
Node	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {$/;"	f	class:Node
Node	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  Node(int _val, Node* _left, Node* _right, Node* _next)$/;"	f	class:Node
Node	tree/116.populating-next-right-pointers-in-each-node.cpp	/^class Node {$/;"	c	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
RandomizedSet	Design/380.insert-delete-get-random-o-1.cpp	/^  RandomizedSet() {$/;"	f	class:RandomizedSet
RandomizedSet	Design/380.insert-delete-get-random-o-1.cpp	/^class RandomizedSet {$/;"	c	file:
SIMULATE_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
STRINGIFY	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	file:
STRINGIFY	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
Solution	BFS/752.open-the-lock.cpp	/^class Solution {$/;"	c	file:
Solution	BFS/877.stone-game.cpp	/^class Solution {$/;"	c	file:
Solution	UnionFind/130.surrounded-regions.cpp	/^class Solution {$/;"	c	file:
Solution	UnionFind/990.satisfiability-of-equality-equations.cpp	/^class Solution {$/;"	c	file:
Solution	array/1.two-sum.cpp	/^class Solution {$/;"	c	file:
Solution	array/11.container-with-most-water.cpp	/^class Solution {$/;"	c	file:
Solution	array/128.longest-consecutive-sequence.cpp	/^class Solution {$/;"	c	file:
Solution	array/15.3-sum.cpp	/^class Solution {$/;"	c	file:
Solution	array/16.3-sum-closest.cpp	/^class Solution {$/;"	c	file:
Solution	array/167.two-sum-ii-input-array-is-sorted.cpp	/^class Solution {$/;"	c	file:
Solution	array/18.4-sum.cpp	/^class Solution {$/;"	c	file:
Solution	array/209.minimum-size-subarray-sum.cpp	/^class Solution {$/;"	c	file:
Solution	array/26.remove-duplicates-from-sorted-array.cpp	/^class Solution {$/;"	c	file:
Solution	array/268.missing-number.cpp	/^class Solution {$/;"	c	file:
Solution	array/27.remove-element.cpp	/^class Solution {$/;"	c	file:
Solution	array/283.move-zeroes.cpp	/^class Solution {$/;"	c	file:
Solution	array/31.next-permutation.cpp	/^class Solution {$/;"	c	file:
Solution	array/33.search-in-rotated-sorted-array.cpp	/^class Solution {$/;"	c	file:
Solution	array/34.find-first-and-last-position-of-element-in-sorted-array.cpp	/^class Solution {$/;"	c	file:
Solution	array/35.search-insert-position.cpp	/^class Solution {$/;"	c	file:
Solution	array/39.combination-sum.cpp	/^class Solution {$/;"	c	file:
Solution	array/410.split-array-largest-sum.cpp	/^class Solution {$/;"	c	file:
Solution	array/42.trapping-rain-water.cpp	/^class Solution {$/;"	c	file:
Solution	array/560.subarray-sum-equals-k.cpp	/^class Solution {$/;"	c	file:
Solution	array/75.sort-colors.cpp	/^class Solution {$/;"	c	file:
Solution	array/80.remove-duplicates-from-sorted-array-ii.cpp	/^class Solution {$/;"	c	file:
Solution	array/870.advantage-shuffle.cpp	/^class Solution {$/;"	c	file:
Solution	array/88.merge-sorted-array.cpp	/^class Solution {$/;"	c	file:
Solution	array/MedianofTwoSortedArrays.cc	/^class Solution {$/;"	c	file:
Solution	backtrace/131.palindrome-partitioning.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/17.letter-combinations-of-a-phone-number.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/200.number-of-islands.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/216.combination-sum-iii.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/39.combination-sum.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/40.combination-sum-ii.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/401.binary-watch.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/41.first-missing-positive.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/46.permutations.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/47.permutations-ii.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/77.combinations.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/78.subsets.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/79.word-search.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/90.subsets-ii.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/93.restore-ip-addresses.cpp	/^class Solution {$/;"	c	file:
Solution	backtrace/perm.cc	/^class Solution {$/;"	c	file:
Solution	bit/191.number-of-1-bits.cpp	/^class Solution {$/;"	c	file:
Solution	datastruct/239.sliding-window-maximum.cpp	/^class Solution {$/;"	c	file:
Solution	datastruct/496.next-greater-element-i.cpp	/^class Solution {$/;"	c	file:
Solution	datastruct/503.next-greater-element-ii.cpp	/^class Solution {$/;"	c	file:
Solution	datastruct/885.spiral-matrix-iii.cpp	/^class Solution {$/;"	c	file:
Solution	depthfirstsearch/floodfill.cc	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/1014.best-sightseeing-pair.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/169.majority-element.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/215.kth-largest-element-in-an-array.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/218.the-skyline-problem.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/240.search-a-2-d-matrix-ii.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/241.different-ways-to-add-parentheses.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/282.expression-add-operators.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/312.burst-balloons.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/315.count-of-smaller-numbers-after-self.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/327.count-of-range-sum.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/4.median-of-two-sorted-arrays.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/493.reverse-pairs.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/514.freedom-trail.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/53.maximum-subarray.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/939.minimum-area-rectangle.cpp	/^class Solution {$/;"	c	file:
Solution	divide_and_conquer/968.binary-tree-cameras.cpp	/^class Solution {$/;"	c	file:
Solution	dp/1143.longest-common-subsequence.cpp	/^class Solution {$/;"	c	file:
Solution	dp/120.triangle.cpp	/^class Solution {$/;"	c	file:
Solution	dp/121.best-time-to-buy-and-sell-stock.cpp	/^class Solution {$/;"	c	file:
Solution	dp/122.best-time-to-buy-and-sell-stock-ii.cpp	/^class Solution {$/;"	c	file:
Solution	dp/123.best-time-to-buy-and-sell-stock-iii.cpp	/^class Solution {$/;"	c	file:
Solution	dp/188.best-time-to-buy-and-sell-stock-iv.cpp	/^class Solution {$/;"	c	file:
Solution	dp/198.house-robber.cpp	/^class Solution {$/;"	c	file:
Solution	dp/213.house-robber-ii.cpp	/^class Solution {$/;"	c	file:
Solution	dp/279.perfect-squares.cpp	/^class Solution {$/;"	c	file:
Solution	dp/300.longest-increasing-subsequence.cpp	/^class Solution {$/;"	c	file:
Solution	dp/309.best-time-to-buy-and-sell-stock-with-cooldown.cpp	/^class Solution {$/;"	c	file:
Solution	dp/337.house-robber-iii.cpp	/^class Solution {$/;"	c	file:
Solution	dp/343.integer-break.cpp	/^class Solution {$/;"	c	file:
Solution	dp/354.russian-doll-envelopes.cpp	/^class Solution {$/;"	c	file:
Solution	dp/416.partition-equal-subset-sum.cpp	/^class Solution {$/;"	c	file:
Solution	dp/5.longest-palindromic-substring.cpp	/^class Solution {$/;"	c	file:
Solution	dp/518.coin-change-2.cpp	/^class Solution {$/;"	c	file:
Solution	dp/583.delete-operation-for-two-strings.cpp	/^class Solution {$/;"	c	file:
Solution	dp/62.unique-paths.cpp	/^class Solution {$/;"	c	file:
Solution	dp/63.unique-paths-ii.cpp	/^class Solution {$/;"	c	file:
Solution	dp/64.minimum-path-sum.cpp	/^class Solution {$/;"	c	file:
Solution	dp/70.climbing-stairs.cpp	/^class Solution {$/;"	c	file:
Solution	dp/712.minimum-ascii-delete-sum-for-two-strings.cpp	/^class Solution {$/;"	c	file:
Solution	dp/714.best-time-to-buy-and-sell-stock-with-transaction-fee.cpp	/^class Solution {$/;"	c	file:
Solution	dp/72.edit-distance.cpp	/^class Solution {$/;"	c	file:
Solution	graph/207.course-schedule.cpp	/^class Solution {$/;"	c	file:
Solution	graph/210.course-schedule-ii.cpp	/^class Solution {$/;"	c	file:
Solution	graph/797.all-paths-from-source-to-target.cpp	/^class Solution {$/;"	c	file:
Solution	greedy/435.non-overlapping-intervals.cpp	/^class Solution {$/;"	c	file:
Solution	greedy/452.minimum-number-of-arrows-to-burst-balloons.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/149.max-points-on-a-line.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/202.happy-number.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/205.isomorphic-strings.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/219.contains-duplicate-ii.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/220.contains-duplicate-iii.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/242.valid-anagram.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/290.word-pattern.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/3.longest-substring-without-repeating-characters.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/349.intersection-of-two-arrays.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/350.intersection-of-two-arrays-ii.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/438.find-all-anagrams-in-a-string.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/447.number-of-boomerangs.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/451.sort-characters-by-frequency.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/454.4-sum-ii.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/49.group-anagrams.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/567.permutation-in-string.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/76.minimum-window-substring.cpp	/^class Solution {$/;"	c	file:
Solution	hashtable/LongestSubstringWithoutRepeatingCharacters.cc	/^class Solution {$/;"	c	file:
Solution	link/147.insertion-sort-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/148.sort-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/160.intersection-of-two-linked-lists.cpp	/^class Solution {$/;"	c	file:
Solution	link/19.remove-nth-node-from-end-of-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/2.add-two-numbers.cpp	/^class Solution {$/;"	c	file:
Solution	link/203.remove-linked-list-elements.cpp	/^class Solution {$/;"	c	file:
Solution	link/206.reverse-linked-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/21.merge-two-sorted-lists.cpp	/^class Solution {$/;"	c	file:
Solution	link/23.merge-k-sorted-lists.cpp	/^class Solution {$/;"	c	file:
Solution	link/234.palindrome-linked-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/237.delete-node-in-a-linked-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/24.swap-nodes-in-pairs.cpp	/^class Solution {$/;"	c	file:
Solution	link/25.reverse-nodes-in-k-group.cpp	/^class Solution {$/;"	c	file:
Solution	link/328.odd-even-linked-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/445.add-two-numbers-ii.cpp	/^class Solution {$/;"	c	file:
Solution	link/61.rotate-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/82.remove-duplicates-from-sorted-list-ii.cpp	/^class Solution {$/;"	c	file:
Solution	link/83.remove-duplicates-from-sorted-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/86.partition-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/876.middle-of-the-linked-list.cpp	/^class Solution {$/;"	c	file:
Solution	link/92.reverse-linked-list-ii.cpp	/^class Solution {$/;"	c	file:
Solution	link/AddTwoNumbers.cc	/^class Solution {$/;"	c	file:
Solution	math/279.perfect-squares.cpp	/^class Solution {$/;"	c	file:
Solution	math/319.bulb-switcher.cpp	/^class Solution {$/;"	c	file:
Solution	math/372.super-pow.cpp	/^class Solution {$/;"	c	file:
Solution	math/645.set-mismatch.cpp	/^class Solution {$/;"	c	file:
Solution	math/986.interval-list-intersections.cpp	/^class Solution {$/;"	c	file:
Solution	minmax/292.nim-game.cpp	/^class Solution {$/;"	c	file:
Solution	random/382.linked-list-random-node.cpp	/^  Solution(ListNode *head) {$/;"	f	class:Solution
Solution	random/382.linked-list-random-node.cpp	/^class Solution {$/;"	c	file:
Solution	random/398.random-pick-index.cpp	/^  Solution(std::vector<int>& nums) {$/;"	f	class:Solution
Solution	random/398.random-pick-index.cpp	/^class Solution {$/;"	c	file:
Solution	sort/493.reverse-pairs.cpp	/^class Solution {$/;"	c	file:
Solution	stack/150.evaluate-reverse-polish-notation.cpp	/^class Solution {$/;"	c	file:
Solution	stack/20.valid-parentheses.cpp	/^class Solution {$/;"	c	file:
Solution	stack/347.top-k-frequent-elements.cpp	/^class Solution {$/;"	c	file:
Solution	stack/71.simplify-path.cpp	/^class Solution {$/;"	c	file:
Solution	str/1081.smallest-subsequence-of-distinct-characters.cpp	/^class Solution {$/;"	c	file:
Solution	str/3.longest-substring-without-repeating-characters.cpp	/^class Solution {$/;"	c	file:
Solution	str/316.remove-duplicate-letters.cpp	/^class Solution {$/;"	c	file:
Solution	str/344.reverse-string.cpp	/^class Solution {$/;"	c	file:
Solution	str/345.reverse-vowels-of-a-string.cpp	/^class Solution {$/;"	c	file:
Solution	str/43.multiply-strings.cpp	/^class Solution {$/;"	c	file:
Solution	tree/100.same-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/101.symmetric-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/102.binary-tree-level-order-traversal.cpp	/^class Solution {$/;"	c	file:
Solution	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/104.maximum-depth-of-binary-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^class Solution {$/;"	c	file:
Solution	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^class Solution {$/;"	c	file:
Solution	tree/107.binary-tree-level-order-traversal-ii.cpp	/^class Solution {$/;"	c	file:
Solution	tree/108.convert-sorted-array-to-binary-search-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/110.balanced-binary-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/111.minimum-depth-of-binary-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/112.path-sum.cpp	/^class Solution {$/;"	c	file:
Solution	tree/113.path-sum-ii.cpp	/^class Solution {$/;"	c	file:
Solution	tree/114.flatten-binary-tree-to-linked-list.cpp	/^class Solution {$/;"	c	file:
Solution	tree/116.populating-next-right-pointers-in-each-node.cpp	/^class Solution {$/;"	c	file:
Solution	tree/124.binary-tree-maximum-path-sum.cpp	/^class Solution {$/;"	c	file:
Solution	tree/129.sum-root-to-leaf-numbers.cpp	/^class Solution {$/;"	c	file:
Solution	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/144.binary-tree-preorder-traversal.cpp	/^class Solution {$/;"	c	file:
Solution	tree/145.binary-tree-postorder-traversal.cpp	/^class Solution {$/;"	c	file:
Solution	tree/199.binary-tree-right-side-view.cpp	/^class Solution {$/;"	c	file:
Solution	tree/222.count-complete-tree-nodes.cpp	/^class Solution {$/;"	c	file:
Solution	tree/226.invert-binary-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/230.kth-smallest-element-in-a-bst.cpp	/^class Solution {$/;"	c	file:
Solution	tree/235.lowest-common-ancestor-of-a-binary-search-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/257.binary-tree-paths.cpp	/^class Solution {$/;"	c	file:
Solution	tree/404.sum-of-left-leaves.cpp	/^class Solution {$/;"	c	file:
Solution	tree/437.path-sum-iii.cpp	/^class Solution {$/;"	c	file:
Solution	tree/450.delete-node-in-a-bst.cpp	/^class Solution {$/;"	c	file:
Solution	tree/538.convert-bst-to-greater-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/652.find-duplicate-subtrees.cpp	/^class Solution {$/;"	c	file:
Solution	tree/654.maximum-binary-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/700.search-in-a-binary-search-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/701.insert-into-a-binary-search-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/94.binary-tree-inorder-traversal.cpp	/^class Solution {$/;"	c	file:
Solution	tree/95.unique-binary-search-trees-ii.cpp	/^class Solution {$/;"	c	file:
Solution	tree/96.unique-binary-search-trees.cpp	/^class Solution {$/;"	c	file:
Solution	tree/98.validate-binary-search-tree.cpp	/^class Solution {$/;"	c	file:
Solution	tree/99.recover-binary-search-tree.cpp	/^class Solution {$/;"	c	file:
Solution	twopointer/1011.capacity-to-ship-packages-within-d-days.cpp	/^class Solution {$/;"	c	file:
Solution	twopointer/875.koko-eating-bananas.cpp	/^class Solution {$/;"	c	file:
TreeNode	divide_and_conquer/968.binary-tree-cameras.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	divide_and_conquer/968.binary-tree-cameras.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	divide_and_conquer/968.binary-tree-cameras.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	divide_and_conquer/968.binary-tree-cameras.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	dp/337.house-robber-iii.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	dp/337.house-robber-iii.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	dp/337.house-robber-iii.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	dp/337.house-robber-iii.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/102.binary-tree-level-order-traversal.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/102.binary-tree-level-order-traversal.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/102.binary-tree-level-order-traversal.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/102.binary-tree-level-order-traversal.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/107.binary-tree-level-order-traversal-ii.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/111.minimum-depth-of-binary-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/111.minimum-depth-of-binary-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/111.minimum-depth-of-binary-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/111.minimum-depth-of-binary-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/114.flatten-binary-tree-to-linked-list.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/114.flatten-binary-tree-to-linked-list.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/114.flatten-binary-tree-to-linked-list.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/114.flatten-binary-tree-to-linked-list.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/124.binary-tree-maximum-path-sum.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/124.binary-tree-maximum-path-sum.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/124.binary-tree-maximum-path-sum.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/124.binary-tree-maximum-path-sum.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/222.count-complete-tree-nodes.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/222.count-complete-tree-nodes.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/222.count-complete-tree-nodes.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/222.count-complete-tree-nodes.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/226.invert-binary-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/226.invert-binary-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/226.invert-binary-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/226.invert-binary-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/230.kth-smallest-element-in-a-bst.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/230.kth-smallest-element-in-a-bst.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/230.kth-smallest-element-in-a-bst.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/230.kth-smallest-element-in-a-bst.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^  TreeNode(int x, TreeNode* left, TreeNode* right)$/;"	f	struct:TreeNode
TreeNode	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/297.serialize-and-deserialize-binary-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/449.serialize-and-deserialize-bst.cpp	/^  TreeNode(int x) : val(x), left(NULL), right(NULL) {$/;"	f	struct:TreeNode
TreeNode	tree/449.serialize-and-deserialize-bst.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/450.delete-node-in-a-bst.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/450.delete-node-in-a-bst.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/450.delete-node-in-a-bst.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/450.delete-node-in-a-bst.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/538.convert-bst-to-greater-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/538.convert-bst-to-greater-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/538.convert-bst-to-greater-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/538.convert-bst-to-greater-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/652.find-duplicate-subtrees.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/652.find-duplicate-subtrees.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/652.find-duplicate-subtrees.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/652.find-duplicate-subtrees.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/654.maximum-binary-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/654.maximum-binary-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/654.maximum-binary-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/654.maximum-binary-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/700.search-in-a-binary-search-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/700.search-in-a-binary-search-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/700.search-in-a-binary-search-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/700.search-in-a-binary-search-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/701.insert-into-a-binary-search-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/701.insert-into-a-binary-search-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/701.insert-into-a-binary-search-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/701.insert-into-a-binary-search-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/94.binary-tree-inorder-traversal.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/94.binary-tree-inorder-traversal.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/94.binary-tree-inorder-traversal.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/94.binary-tree-inorder-traversal.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/95.unique-binary-search-trees-ii.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/95.unique-binary-search-trees-ii.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/95.unique-binary-search-trees-ii.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/95.unique-binary-search-trees-ii.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/98.validate-binary-search-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/98.validate-binary-search-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/98.validate-binary-search-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/98.validate-binary-search-tree.cpp	/^struct TreeNode {$/;"	s	file:
TreeNode	tree/99.recover-binary-search-tree.cpp	/^  TreeNode() : val(0), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/99.recover-binary-search-tree.cpp	/^  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {$/;"	f	struct:TreeNode
TreeNode	tree/99.recover-binary-search-tree.cpp	/^  TreeNode(int x, TreeNode *left, TreeNode *right)$/;"	f	struct:TreeNode
TreeNode	tree/99.recover-binary-search-tree.cpp	/^struct TreeNode {$/;"	s	file:
Tweet	hashtable/355.design-twitter.cpp	/^  Tweet(int tweetId, int timeId)$/;"	f	struct:Tweet
Tweet	hashtable/355.design-twitter.cpp	/^struct Tweet {$/;"	s	file:
Twitter	hashtable/355.design-twitter.cpp	/^  Twitter() {$/;"	f	class:Twitter
Twitter	hashtable/355.design-twitter.cpp	/^class Twitter {$/;"	c	file:
UF	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    UF(int n) {$/;"	f	class:Solution::UF
UF	UnionFind/990.satisfiability-of-equality-equations.cpp	/^  class UF {$/;"	c	class:Solution	file:
UF	UnionFind/Unionfind.cc	/^  UF(int n) {$/;"	f	class:UF
UF	UnionFind/Unionfind.cc	/^class UF {$/;"	c	file:
Union	UnionFind/Unionfind.cc	/^  void Union(int p, int q) {$/;"	f	class:UF
User	hashtable/355.design-twitter.cpp	/^  User(int userId) : userId(userId), head(nullptr) {$/;"	f	class:User
User	hashtable/355.design-twitter.cpp	/^class User {$/;"	c	file:
__has_include	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^#  define __has_include(/;"	d	file:
__has_include	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
_cap	Design/460.lfu-cache.cpp	/^  int                                          _cap;$/;"	m	class:LFUCache	file:
_count	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    int              _count;$/;"	m	class:Solution::UF	file:
_count	heap/designheap.cc	/^  int              _count;  \/\/ 当前堆中元素$/;"	m	class:MaxHeap	file:
_head	random/382.linked-list-random-node.cpp	/^  ListNode *_head;$/;"	m	class:Solution	file:
_help	stack/20.valid-parentheses.cpp	/^  std::stack<char> _help;$/;"	m	class:Solution	file:
_maxPathSum	tree/124.binary-tree-maximum-path-sum.cpp	/^  int _maxPathSum(TreeNode *root) {$/;"	f	class:Solution	file:
_minFreq	Design/460.lfu-cache.cpp	/^  int                                          _minFreq;  \/\/ 最小的freq$/;"	m	class:LFUCache	file:
_n	datastruct/ExamRoom.cc	/^    static int _n;$/;"	m	struct:ExamRoom::less	file:
_nestedList	tree/341.flatten-nested-list-iterator.cpp	/^  std::list<NestedInteger> _nestedList;$/;"	m	class:NestedIterator	file:
_nums	random/398.random-pick-index.cpp	/^  std::vector<int> _nums;$/;"	m	class:Solution	file:
_parent	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    std::vector<int> _parent;$/;"	m	class:Solution::UF	file:
_pq	heap/designheap.cc	/^  std::vector<int> _pq;     \/\/ 数组元素$/;"	m	class:MaxHeap	file:
_size	Design/460.lfu-cache.cpp	/^  int                                          _size;$/;"	m	class:LFUCache	file:
_stack	stack/341.flatten-nested-list-iterator.cpp	/^    stack<NestedInteger> _stack;$/;"	m	class:NestedIterator	file:
_stack1	stack/232.implement-queue-using-stacks.cpp	/^  std::stack<int> _stack1;$/;"	m	class:MyQueue	file:
_stack2	stack/232.implement-queue-using-stacks.cpp	/^  std::stack<int> _stack2;$/;"	m	class:MyQueue	file:
_weight	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    std::vector<int> _weight;$/;"	m	class:Solution::UF	file:
addInterval	datastruct/ExamRoom.cc	/^  void addInterval(std::pair<int, int> a) {$/;"	f	class:ExamRoom	file:
addNum	heap/295.find-median-from-data-stream.cpp	/^  void addNum(int num) {$/;"	f	class:MedianFinder
addOperators	divide_and_conquer/282.expression-add-operators.cpp	/^  vector<string> addOperators(string num, int target) {$/;"	f	class:Solution
addTwoNumbers	link/2.add-two-numbers.cpp	/^  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution
addTwoNumbers	link/445.add-two-numbers-ii.cpp	/^  ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution
addTwoNumbers	link/AddTwoNumbers.cc	/^    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution
advantageCount	array/870.advantage-shuffle.cpp	/^  std::vector<int> advantageCount(std::vector<int>& nums1,$/;"	f	class:Solution
allPathsSourceTarget	graph/797.all-paths-from-source-to-target.cpp	/^  std::vector<std::vector<int>> allPathsSourceTarget($/;"	f	class:Solution
ans	tree/124.binary-tree-maximum-path-sum.cpp	/^  int ans = INT_MIN;$/;"	m	class:Solution	file:
backtrace	backtrace/93.restore-ip-addresses.cpp	/^  void backtrace(string s, int start, int part) {$/;"	f	class:Solution	file:
base	math/372.super-pow.cpp	/^  int base = 1337;$/;"	m	class:Solution	file:
big	heap/295.find-median-from-data-stream.cpp	/^  std::priority_queue<int, std::vector<int>>          big;    \/\/ 默认大根堆$/;"	m	class:MedianFinder	file:
binaryTreePaths	tree/257.binary-tree-paths.cpp	/^  vector<string> binaryTreePaths(TreeNode* root) {$/;"	f	class:Solution
bstToGst	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  TreeNode *bstToGst(TreeNode *root) {$/;"	f	class:Solution
buildGraph	graph/207.course-schedule.cpp	/^  std::unordered_map<int, std::list<int>> buildGraph($/;"	f	class:Solution	file:
buildGraph	graph/210.course-schedule-ii.cpp	/^  std::vector<std::vector<int>> buildGraph($/;"	f	class:Solution	file:
buildTree	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  TreeNode *buildTree(std::vector<int> &preorder, std::vector<int> &inorder) {$/;"	f	class:Solution
buildTree	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  TreeNode *buildTree(std::vector<int> &preorder,$/;"	f	class:Solution	file:
buildTree	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  TreeNode *buildTree(std::vector<int> &inorder, std::vector<int> &postorder) {$/;"	f	class:Solution
buildTree	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  TreeNode *buildTree(std::vector<int> &inorder,$/;"	f	class:Solution	file:
bulbSwitch	math/319.bulb-switcher.cpp	/^  int bulbSwitch(int n) {$/;"	f	class:Solution
calculate	datastruct/calc.cc	/^int calculate(std::string str) {$/;"	f
canFinish	graph/207.course-schedule.cpp	/^  bool canFinish(int numCourses, std::vector<std::vector<int>>& prerequisites) {$/;"	f	class:Solution
canFinish	twopointer/1011.capacity-to-ship-packages-within-d-days.cpp	/^  bool canFinish(std::vector<int>& weight, int speed, int days) {$/;"	f	class:Solution	file:
canFinish	twopointer/875.koko-eating-bananas.cpp	/^  bool canFinish(std::vector<int>& piles, int speed, int h) {$/;"	f	class:Solution	file:
canPartition	dp/416.partition-equal-subset-sum.cpp	/^  bool canPartition(std::vector<int>& nums) {$/;"	f	class:Solution
canWinNim	minmax/292.nim-game.cpp	/^  bool canWinNim(int n) {$/;"	f	class:Solution
capacity_	Design/146.lru-cache.cpp	/^  const int                       capacity_;$/;"	m	class:LRUCache	file:
change	dp/518.coin-change-2.cpp	/^  int change(int amount, std::vector<int>& coins) {$/;"	f	class:Solution
checkInclusion	hashtable/567.permutation-in-string.cpp	/^  bool checkInclusion(std::string s1, std::string s2) {$/;"	f	class:Solution
climbStairs	dp/70.climbing-stairs.cpp	/^  int climbStairs(int n) {$/;"	f	class:Solution
combinationSum	array/39.combination-sum.cpp	/^  vector<vector<int>> combinationSum(vector<int>& candidates, int target) {$/;"	f	class:Solution
combinationSum	array/39.combination-sum.cpp	/^  void combinationSum(vector<int>& candidates, int target, int index) {$/;"	f	class:Solution	file:
combinationSum	backtrace/39.combination-sum.cpp	/^  vector<vector<int>> combinationSum(vector<int>& candidates, int target) {$/;"	f	class:Solution
combinationSum	backtrace/39.combination-sum.cpp	/^  void combinationSum(vector<int>& candidates, int target, int index) {$/;"	f	class:Solution	file:
combinationSum	backtrace/40.combination-sum-ii.cpp	/^  void combinationSum(vector<int>& candidates, int target, int index) {$/;"	f	class:Solution	file:
combinationSum2	backtrace/40.combination-sum-ii.cpp	/^  vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {$/;"	f	class:Solution
combinationSum3	backtrace/216.combination-sum-iii.cpp	/^  vector<vector<int>> combinationSum3(int k, int n) {$/;"	f	class:Solution
combinationSum3	backtrace/216.combination-sum-iii.cpp	/^  void combinationSum3(int k, int n, int start) {$/;"	f	class:Solution	file:
combine	backtrace/77.combinations.cpp	/^  vector<vector<int>> combine(int n, int k) {$/;"	f	class:Solution
combine	backtrace/77.combinations.cpp	/^  void combine(int n, int k, int start) {$/;"	f	class:Solution	file:
connect	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    void connect(int p, int q) {$/;"	f	class:Solution::UF
connect	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  Node* connect(Node* root) {$/;"	f	class:Solution
connectTwoNode	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  void connectTwoNode(Node* node1, Node* node2) {$/;"	f	class:Solution	file:
const	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	file:
constructMaximumBinaryTree	tree/654.maximum-binary-tree.cpp	/^  TreeNode *constructMaximumBinaryTree(std::vector<int> &nums) {$/;"	f	class:Solution
constructMaximumBinaryTree	tree/654.maximum-binary-tree.cpp	/^  TreeNode *constructMaximumBinaryTree(std::vector<int> &nums,$/;"	f	class:Solution	file:
containsNearbyAlmostDuplicate	hashtable/220.contains-duplicate-iii.cpp	/^  bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {$/;"	f	class:Solution
containsNearbyDuplicate	hashtable/219.contains-duplicate-ii.cpp	/^  bool containsNearbyDuplicate(vector<int>& nums, int k) {$/;"	f	class:Solution
convertBST	tree/538.convert-bst-to-greater-tree.cpp	/^  TreeNode *convertBST(TreeNode *root) {$/;"	f	class:Solution
count	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    int count() const {$/;"	f	class:Solution::UF
count	UnionFind/Unionfind.cc	/^  int              count;   \/\/ 连通分量个数$/;"	m	class:UF	file:
countNodes	tree/222.count-complete-tree-nodes.cpp	/^  int countNodes(TreeNode *root) {$/;"	f	class:Solution
countRangeSum	divide_and_conquer/327.count-of-range-sum.cpp	/^  int countRangeSum(vector<int>& nums, int lower, int upper) {$/;"	f	class:Solution
countSmaller	divide_and_conquer/315.count-of-smaller-numbers-after-self.cpp	/^    vector<int> countSmaller(vector<int>& nums) {$/;"	f	class:Solution
delMax	heap/designheap.cc	/^  int delMax() {$/;"	f	class:MaxHeap
deleteDuplicates	link/82.remove-duplicates-from-sorted-list-ii.cpp	/^  ListNode* deleteDuplicates(ListNode* head) {$/;"	f	class:Solution
deleteDuplicates	link/83.remove-duplicates-from-sorted-list.cpp	/^  ListNode* deleteDuplicates(ListNode* head) {$/;"	f	class:Solution
deleteNode	link/237.delete-node-in-a-linked-list.cpp	/^  void deleteNode(ListNode* node) {$/;"	f	class:Solution
deleteNode	tree/450.delete-node-in-a-bst.cpp	/^  TreeNode *deleteNode(TreeNode *root, int key) {$/;"	f	class:Solution
deserialize	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  TreeNode *deserialize(std::list<std::string> &data) {$/;"	f	class:Codec	file:
deserialize	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  TreeNode *deserialize(std::string data) {$/;"	f	class:Codec
deserialize	tree/449.serialize-and-deserialize-bst.cpp	/^  TreeNode* deserialize(list<string>& str) {$/;"	f	class:Codec	file:
deserialize	tree/449.serialize-and-deserialize-bst.cpp	/^  TreeNode* deserialize(string data) {$/;"	f	class:Codec
dfs	backtrace/200.number-of-islands.cpp	/^  void dfs(vector<vector<char>>& grid, int x, int y, int row, int col) {$/;"	f	class:Solution	file:
diffWaysToCompute	divide_and_conquer/241.different-ways-to-add-parentheses.cpp	/^  vector<int> diffWaysToCompute(string input) {$/;"	f	class:Solution
dir	UnionFind/130.surrounded-regions.cpp	/^  std::vector<std::vector<int>> dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};$/;"	m	class:Solution	file:
dis	hashtable/447.number-of-boomerangs.cpp	/^  int dis(pair<int, int>& points0, pair<int, int>& points1) {$/;"	f	class:Solution	file:
distance	datastruct/ExamRoom.cc	/^    int distance(std::pair<int, int> nums) {$/;"	f	struct:ExamRoom::less
empty	stack/225.implement_stack_using_queues.cpp	/^    bool empty() {$/;"	f	class:MyStack
empty	stack/232.implement-queue-using-stacks.cpp	/^  bool empty() {$/;"	f	class:MyQueue
endMap	datastruct/ExamRoom.cc	/^  std::map<int, std::pair<int, int>> endMap;$/;"	m	class:ExamRoom	file:
equationsPossible	UnionFind/990.satisfiability-of-equality-equations.cpp	/^  bool equationsPossible(std::vector<std::string>& equations) {$/;"	f	class:Solution
eraseOverlapIntervals	greedy/435.non-overlapping-intervals.cpp	/^  int eraseOverlapIntervals(std::vector<std::vector<int>>& intervals) {$/;"	f	class:Solution
evalRPN	stack/150.evaluate-reverse-polish-notation.cpp	/^  int evalRPN(vector<string>& tokens) {$/;"	f	class:Solution
exist	backtrace/79.word-search.cpp	/^  bool exist(vector<vector<char>>& board, string word) {$/;"	f	class:Solution
fill	UnionFind/130.surrounded-regions.cpp	/^  void fill(std::vector<std::vector<char>>& board,$/;"	f	class:Solution	file:
fillImage	depthfirstsearch/floodfill.cc	/^  void fillImage(std::vector<std::vector<int>> &board,$/;"	f	class:Solution	file:
find	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    int find(int p) {$/;"	f	class:Solution::UF
findAnagrams	hashtable/438.find-all-anagrams-in-a-string.cpp	/^  std::vector<int> findAnagrams(std::string s, std::string p) {$/;"	f	class:Solution
findDuplicateSubtrees	tree/652.find-duplicate-subtrees.cpp	/^  std::vector<TreeNode *> findDuplicateSubtrees(TreeNode *root) {$/;"	f	class:Solution
findErrorNums	math/645.set-mismatch.cpp	/^  std::vector<int> findErrorNums(std::vector<int>& nums) {$/;"	f	class:Solution
findKthLargest	divide_and_conquer/215.kth-largest-element-in-an-array.cpp	/^  int findKthLargest(std::vector<int>& nums, int k) {$/;"	f	class:Solution
findKthLargest	divide_and_conquer/215.kth-largest-element-in-an-array.cpp	/^  int findKthLargest(std::vector<int>& nums, int k, int left, int right) {$/;"	f	class:Solution	file:
findMedian	heap/295.find-median-from-data-stream.cpp	/^  double findMedian() {$/;"	f	class:MedianFinder
findMedianSortedArrays	array/MedianofTwoSortedArrays.cc	/^    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {$/;"	f	class:Solution
findMedianSortedArrays	divide_and_conquer/4.median-of-two-sorted-arrays.cpp	/^  double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {$/;"	f	class:Solution
findMinArrowShots	greedy/452.minimum-number-of-arrows-to-burst-balloons.cpp	/^  int findMinArrowShots(std::vector<std::vector<int>>& points) {$/;"	f	class:Solution
findOrder	graph/210.course-schedule-ii.cpp	/^  std::vector<int> findOrder(int                            numCourses,$/;"	f	class:Solution
findPath	tree/437.path-sum-iii.cpp	/^  int findPath(TreeNode* root, int sum) {$/;"	f	class:Solution	file:
findRotateSteps	divide_and_conquer/514.freedom-trail.cpp	/^  int findRotateSteps(string ring, string key) {$/;"	f	class:Solution
findletterCombinations	backtrace/17.letter-combinations-of-a-phone-number.cpp	/^  void findletterCombinations(string &digits, int index, const string &s,$/;"	f	class:Solution	file:
firstMissingPositive	backtrace/41.first-missing-positive.cpp	/^  int firstMissingPositive(vector<int>& nums) {$/;"	f	class:Solution
flatten	tree/114.flatten-binary-tree-to-linked-list.cpp	/^  void flatten(TreeNode *root) {$/;"	f	class:Solution
floodfill	depthfirstsearch/floodfill.cc	/^  std::vector<std::vector<int>> floodfill(std::vector<std::vector<int>> &board,$/;"	f	class:Solution
follow	hashtable/355.design-twitter.cpp	/^  void follow(int followerId, int followeeId) {$/;"	f	class:Twitter
follow	hashtable/355.design-twitter.cpp	/^  void follow(int userid) {$/;"	f	class:User
followee	hashtable/355.design-twitter.cpp	/^  std::set<int> followee;  \/\/ 该用户的关注列表$/;"	m	class:User	file:
fourSum	array/18.4-sum.cpp	/^  std::vector<std::vector<int>> fourSum(std::vector<int>& nums, int target) {$/;"	f	class:Solution
fourSum	array/18.4-sum.cpp	/^  void fourSum(std::vector<int>&              nums,$/;"	f	class:Solution	file:
fourSumCount	hashtable/454.4-sum-ii.cpp	/^  int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C,$/;"	f	class:Solution
freqKeysMap	Design/460.lfu-cache.cpp	/^  std::unordered_map<int, std::list<int>> freqKeysMap;  \/\/ freq-keys map$/;"	m	class:LFUCache	file:
freqToVals	Design/895.maximum-frequency-stack.cpp	/^  std::unordered_map<int, std::stack<int>> freqToVals;$/;"	m	class:FreqStack	file:
frequencySort	hashtable/451.sort-characters-by-frequency.cpp	/^  std::string frequencySort(std::string s) {$/;"	f	class:Solution
generateTrees	tree/95.unique-binary-search-trees-ii.cpp	/^  std::vector<TreeNode *> generateTrees(int lo, int hi) {$/;"	f	class:Solution	file:
generateTrees	tree/95.unique-binary-search-trees-ii.cpp	/^  std::vector<TreeNode *> generateTrees(int n) {$/;"	f	class:Solution
get	Design/146.lru-cache.cpp	/^  int get(int key) {$/;"	f	class:LRUCache
get	Design/460.lfu-cache.cpp	/^  int get(int key) {$/;"	f	class:LFUCache
getFollow	hashtable/355.design-twitter.cpp	/^  std::set<int> getFollow() const {$/;"	f	class:User
getIntersectionNode	link/160.intersection-of-two-linked-lists.cpp	/^  ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {$/;"	f	class:Solution
getKElement	divide_and_conquer/169.majority-element.cpp	/^  int getKElement(vector<int>& nums, int begin, int end, int k) {$/;"	f	class:Solution	file:
getMax	array/410.split-array-largest-sum.cpp	/^  int getMax(std::vector<int>& nums) {$/;"	f	class:Solution	file:
getMax	twopointer/1011.capacity-to-ship-packages-within-d-days.cpp	/^  int getMax(std::vector<int>& weights) {$/;"	f	class:Solution	file:
getMax	twopointer/875.koko-eating-bananas.cpp	/^  int getMax(std::vector<int>& piles) {$/;"	f	class:Solution	file:
getMin	stack/155.min-stack.cpp	/^  int getMin() {$/;"	f	class:MinStack
getMin	tree/450.delete-node-in-a-bst.cpp	/^  TreeNode *getMin(TreeNode *root) {$/;"	f	class:Solution	file:
getNewsFeed	hashtable/355.design-twitter.cpp	/^  std::vector<int> getNewsFeed(int userId) {$/;"	f	class:Twitter
getRandom	Design/380.insert-delete-get-random-o-1.cpp	/^  int getRandom() {$/;"	f	class:RandomizedSet
getRandom	random/382.linked-list-random-node.cpp	/^  int getRandom() {$/;"	f	class:Solution
getSkyline	divide_and_conquer/218.the-skyline-problem.cpp	/^  vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {$/;"	f	class:Solution
getSum	array/410.split-array-largest-sum.cpp	/^  int getSum(std::vector<int>& nums) {$/;"	f	class:Solution	file:
getTweetList	hashtable/355.design-twitter.cpp	/^  Tweet *getTweetList() const {$/;"	f	class:User
greater	array/870.advantage-shuffle.cpp	/^  struct greater {$/;"	s	class:Solution	file:
greater	link/23.merge-k-sorted-lists.cpp	/^  struct greater {$/;"	s	class:Solution	file:
greator	heap/295.find-median-from-data-stream.cpp	/^  struct greator {$/;"	s	class:MedianFinder	file:
groupAnagrams	hashtable/49.group-anagrams.cpp	/^  vector<vector<string>> groupAnagrams(vector<string>& strs) {$/;"	f	class:Solution
hammingWeight	bit/191.number-of-1-bits.cpp	/^  int hammingWeight(uint32_t n) {$/;"	f	class:Solution
hasNext	stack/341.flatten-nested-list-iterator.cpp	/^  bool hasNext() {$/;"	f	class:NestedIterator
hasNext	tree/341.flatten-nested-list-iterator.cpp	/^  bool hasNext() {$/;"	f	class:NestedIterator
hasPathSum	tree/112.path-sum.cpp	/^  bool hasPathSum(TreeNode* root, int targetSum) {$/;"	f	class:Solution
head	hashtable/355.design-twitter.cpp	/^  Tweet *       head;      \/\/ 最新的一条tweet$/;"	m	class:User	file:
head_	Design/146.lru-cache.cpp	/^  std::list<std::pair<int, int>> *head_;  \/\/ 存储数据$/;"	m	class:LRUCache	file:
increaseFreq	Design/460.lfu-cache.cpp	/^  void increaseFreq(int key) {$/;"	f	class:LFUCache	file:
info_arch	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v
info_version_internal	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
info_version_internal	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";$/;"	v
inorderTraversal	tree/94.binary-tree-inorder-traversal.cpp	/^  vector<int> inorderTraversal(TreeNode *root) {$/;"	f	class:Solution
inorderTraversal	tree/94.binary-tree-inorder-traversal.cpp	/^  void inorderTraversal(TreeNode *root, vector<int> &res) {$/;"	f	class:Solution	file:
insert	Design/380.insert-delete-get-random-o-1.cpp	/^  bool insert(int val) {$/;"	f	class:RandomizedSet
insert	heap/designheap.cc	/^  void insert(int e) {$/;"	f	class:MaxHeap
insertIntoBST	tree/701.insert-into-a-binary-search-tree.cpp	/^  TreeNode *insertIntoBST(TreeNode *root, int val) {$/;"	f	class:Solution
insertionSortList	link/147.insertion-sort-list.cpp	/^  ListNode* insertionSortList(ListNode* head) {$/;"	f	class:Solution
integerBreak	dp/343.integer-break.cpp	/^  int integerBreak(int n) {$/;"	f	class:Solution
intersect	hashtable/350.intersection-of-two-arrays-ii.cpp	/^  std::vector<int> intersect(std::vector<int>& nums1, std::vector<int>& nums2) {$/;"	f	class:Solution
intersection	hashtable/349.intersection-of-two-arrays.cpp	/^  std::vector<int> intersection(std::vector<int>& nums1,$/;"	f	class:Solution
intervalIntersection	math/986.interval-list-intersections.cpp	/^  vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList,$/;"	f	class:Solution
intervalSchedule	greedy/intervalSchedule.cc	/^int intervalSchedule(std::vector<std::vector<int>> intvs) {$/;"	f
invertTree	tree/226.invert-binary-tree.cpp	/^  TreeNode *invertTree(TreeNode *root) {$/;"	f	class:Solution
isAnagram	hashtable/242.valid-anagram.cpp	/^  bool isAnagram(string s, string t) {$/;"	f	class:Solution
isBalanced	tree/110.balanced-binary-tree.cpp	/^  bool isBalanced(TreeNode* root) {$/;"	f	class:Solution
isConnect	UnionFind/990.satisfiability-of-equality-equations.cpp	/^    bool isConnect(int p, int q) {$/;"	f	class:Solution::UF
isConnect	UnionFind/Unionfind.cc	/^  bool isConnect(int p, int q) {$/;"	f	class:UF
isHappy	hashtable/202.happy-number.cpp	/^  bool isHappy(int n) {$/;"	f	class:Solution
isInArea	UnionFind/130.surrounded-regions.cpp	/^  bool isInArea(int row, int col, int x, int y) {$/;"	f	class:Solution	file:
isInArea	depthfirstsearch/floodfill.cc	/^  bool isInArea(int sr, int sc, int row, int col) {$/;"	f	class:Solution	file:
isInEdge	backtrace/200.number-of-islands.cpp	/^  bool isInEdge(int x, int y, int row, int col) {$/;"	f	class:Solution	file:
isInEdge	backtrace/79.word-search.cpp	/^  bool isInEdge(int x, int y, int row, int col) {$/;"	f	class:Solution	file:
isIsomorphic	hashtable/205.isomorphic-strings.cpp	/^  bool isIsomorphic(string s, string t) {$/;"	f	class:Solution
isPalindrome	backtrace/131.palindrome-partitioning.cpp	/^  bool isPalindrome(string t, int start, int end) {$/;"	f	class:Solution	file:
isPalindrome	link/234.palindrome-linked-list.cpp	/^  bool isPalindrome(ListNode *head) {$/;"	f	class:Solution
isPalindrome	link/234.palindrome-linked-list.cpp	/^  bool isPalindrome(ListNode *head, ListNode *second) {$/;"	f	class:Solution	file:
isSameTree	tree/100.same-tree.cpp	/^  bool isSameTree(TreeNode* p, TreeNode* q) {$/;"	f	class:Solution
isSubsequence	str/subsequence.cc	/^bool isSubsequence(std::string s, std::string t) {$/;"	f
isSymmetric	tree/101.symmetric-tree.cpp	/^  bool isSymmetric(TreeNode *left, TreeNode *right) {$/;"	f	class:Solution	file:
isSymmetric	tree/101.symmetric-tree.cpp	/^  bool isSymmetric(TreeNode *root) {$/;"	f	class:Solution
isValid	stack/20.valid-parentheses.cpp	/^  bool isValid(std::string s) {$/;"	f	class:Solution
isValidBST	tree/98.validate-binary-search-tree.cpp	/^  bool isValidBST(TreeNode *root) {$/;"	f	class:Solution
isValidBST	tree/98.validate-binary-search-tree.cpp	/^  bool isValidBST(TreeNode *root, TreeNode *min, TreeNode *max) {$/;"	f	class:Solution	file:
isValidIP	backtrace/93.restore-ip-addresses.cpp	/^  bool isValidIP(string s, int start, int end) {$/;"	f	class:Solution	file:
keyIter	Design/460.lfu-cache.cpp	/^                                          keyIter;      \/\/ key-iterator map$/;"	m	class:LFUCache	file:
kthSmallest	tree/230.kth-smallest-element-in-a-bst.cpp	/^  int kthSmallest(TreeNode *root, int k) {$/;"	f	class:Solution
kvMap	Design/460.lfu-cache.cpp	/^  std::unordered_map<int, std::pair<int, int>> kvMap;  \/\/ key-<val, frep> map$/;"	m	class:LFUCache	file:
lcs	dp/583.delete-operation-for-two-strings.cpp	/^  int lcs(std::string word1, std::string word2) {$/;"	f	class:Solution	file:
leave	datastruct/ExamRoom.cc	/^  void leave(int p) {$/;"	f	class:ExamRoom
left	divide_and_conquer/968.binary-tree-cameras.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	dp/337.house-robber-iii.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	heap/designheap.cc	/^  int left(int root) {$/;"	f	class:MaxHeap
left	tree/102.binary-tree-level-order-traversal.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/111.minimum-depth-of-binary-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/114.flatten-binary-tree-to-linked-list.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  Node* left;$/;"	m	class:Node	file:
left	tree/124.binary-tree-maximum-path-sum.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/222.count-complete-tree-nodes.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/226.invert-binary-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/230.kth-smallest-element-in-a-bst.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^  TreeNode* left;$/;"	m	struct:TreeNode	file:
left	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/449.serialize-and-deserialize-bst.cpp	/^  TreeNode* left;$/;"	m	struct:TreeNode	file:
left	tree/450.delete-node-in-a-bst.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/538.convert-bst-to-greater-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/652.find-duplicate-subtrees.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/654.maximum-binary-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/700.search-in-a-binary-search-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/701.insert-into-a-binary-search-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/94.binary-tree-inorder-traversal.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/95.unique-binary-search-trees-ii.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/98.validate-binary-search-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
left	tree/99.recover-binary-search-tree.cpp	/^  TreeNode *left;$/;"	m	struct:TreeNode	file:
lengthOfLIS	dp/300.longest-increasing-subsequence.cpp	/^  int lengthOfLIS(std::vector<int>& nums) {$/;"	f	class:Solution
lengthOfLongestSubstring	hashtable/3.longest-substring-without-repeating-characters.cpp	/^  int lengthOfLongestSubstring(std::string s) {$/;"	f	class:Solution
lengthOfLongestSubstring	hashtable/LongestSubstringWithoutRepeatingCharacters.cc	/^    int lengthOfLongestSubstring(string s) {$/;"	f	class:Solution
lengthOfLongestSubstring	str/3.longest-substring-without-repeating-characters.cpp	/^  int lengthOfLongestSubstring(std::string s) {$/;"	f	class:Solution
less	datastruct/ExamRoom.cc	/^  struct less {$/;"	s	class:ExamRoom	file:
less	hashtable/355.design-twitter.cpp	/^  struct less {$/;"	s	class:Twitter	file:
less	heap/designheap.cc	/^  bool less(int i, int j) {$/;"	f	class:MaxHeap
letterCombinations	backtrace/17.letter-combinations-of-a-phone-number.cpp	/^  vector<string> letterCombinations(string digits) {$/;"	f	class:Solution
letterMap	backtrace/17.letter-combinations-of-a-phone-number.cpp	/^  const string letterMap[10] = {$/;"	m	class:Solution	file:
levelOrder	tree/102.binary-tree-level-order-traversal.cpp	/^  vector<vector<int>> levelOrder(TreeNode *root) {$/;"	f	class:Solution
levelOrder	tree/102.binary-tree-level-order-traversal.cpp	/^  void levelOrder(TreeNode *root, vector<vector<int>> &res) {$/;"	f	class:Solution	file:
levelOrderBottom	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  vector<vector<int>> levelOrderBottom(TreeNode *root) {$/;"	f	class:Solution
levelOrderBottom	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  void levelOrderBottom(TreeNode *root, vector<vector<int>> &res, int level) {$/;"	f	class:Solution	file:
longestCommonSubsequence	dp/1143.longest-common-subsequence.cpp	/^  int longestCommonSubsequence(std::string text1, std::string text2) {$/;"	f	class:Solution
longestConsecutive	array/128.longest-consecutive-sequence.cpp	/^  int longestConsecutive(std::vector<int>& nums) {$/;"	f	class:Solution
longestPalindrome	dp/5.longest-palindromic-substring.cpp	/^  std::string longestPalindrome(std::string s) {$/;"	f	class:Solution
longofLIS	dp/354.russian-doll-envelopes.cpp	/^  int longofLIS(std::vector<int> &height) {$/;"	f	class:Solution	file:
lowestCommonAncestor	tree/235.lowest-common-ancestor-of-a-binary-search-tree.cpp	/^  TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {$/;"	f	class:Solution
lowestCommonAncestor	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^  TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {$/;"	f	class:Solution
main	Design/460.lfu-cache.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/11.container-with-most-water.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/128.longest-consecutive-sequence.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/16.3-sum-closest.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/167.two-sum-ii-input-array-is-sorted.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/209.minimum-size-subarray-sum.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/33.search-in-rotated-sorted-array.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/75.sort-colors.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/80.remove-duplicates-from-sorted-array-ii.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/88.merge-sorted-array.cpp	/^int main(int argc, char** argv) {$/;"	f
main	array/MedianofTwoSortedArrays.cc	/^int main(){$/;"	f
main	backtrace/47.permutations-ii.cpp	/^int main(int argc, char** argv) {$/;"	f
main	backtrace/perm.cc	/^int main(int argc, char **argv) {$/;"	f
main	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	divide_and_conquer/169.majority-element.cpp	/^int main(int argc, char** argv) {$/;"	f
main	divide_and_conquer/215.kth-largest-element-in-an-array.cpp	/^int main(int argc, char** argv) {$/;"	f
main	divide_and_conquer/218.the-skyline-problem.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^int main(int argc, char** argv) {$/;"	f
main	divide_and_conquer/240.search-a-2-d-matrix-ii.cpp	/^int main(int argc, char** argv) {$/;"	f
main	divide_and_conquer/241.different-ways-to-add-parentheses.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	divide_and_conquer/327.count-of-range-sum.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	divide_and_conquer/4.median-of-two-sorted-arrays.cpp	/^int main(int argc, char** argv) {$/;"	f
main	divide_and_conquer/493.reverse-pairs.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	divide_and_conquer/514.freedom-trail.cpp	/^int main(int argc, char **argv) {$/;"	f
main	divide_and_conquer/53.maximum-subarray.cpp	/^int main(int argc, char** argv) {$/;"	f
main	divide_and_conquer/968.binary-tree-cameras.cpp	/^int main(int argc, char **argv) {$/;"	f
main	dp/416.partition-equal-subset-sum.cpp	/^int main(int argc, char** argv) {$/;"	f
main	dp/518.coin-change-2.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	dp/583.delete-operation-for-two-strings.cpp	/^int main(int argc, char **argv) {$/;"	f
main	dp/712.minimum-ascii-delete-sum-for-two-strings.cpp	/^int main(int argc, char** argv) {$/;"	f
main	hashtable/349.intersection-of-two-arrays.cpp	/^int main(int argc, char** argv) {$/;"	f
main	hashtable/350.intersection-of-two-arrays-ii.cpp	/^int main(int argc, char** argv) {$/;"	f
main	hashtable/355.design-twitter.cpp	/^int main(int argc, char **argv) {$/;"	f
main	hashtable/451.sort-characters-by-frequency.cpp	/^int main(int argc, char **argv) {$/;"	f
main	hashtable/LongestSubstringWithoutRepeatingCharacters.cc	/^int main(){$/;"	f
main	link/147.insertion-sort-list.cpp	/^int main(int argc, char** argv) {$/;"	f
main	link/19.remove-nth-node-from-end-of-list.cpp	/^int main(int argc, char** argv) {$/;"	f
main	link/92.reverse-linked-list-ii.cpp	/^int main(int argc, char** argv) {$/;"	f
main	link/AddTwoNumbers.cc	/^int main(){$/;"	f
main	sort/493.reverse-pairs.cpp	/^int main(int argc, char** argv) {$/;"	f
main	stack/155.min-stack.cpp	/^int main(int argc, char** argv) {$/;"	f
main	stack/20.valid-parentheses.cpp	/^int main(int argc, char** argv) {$/;"	f
main	stack/232.implement-queue-using-stacks.cpp	/^int main(int argc, char** argv) {$/;"	f
main	str/3.longest-substring-without-repeating-characters.cpp	/^int main(int argc, char **argv) {$/;"	f
main	str/344.reverse-string.cpp	/^int main(int argc, char** argv) {$/;"	f
main	str/345.reverse-vowels-of-a-string.cpp	/^int main(int argc, char** argv) {$/;"	f
main	tree/102.binary-tree-level-order-traversal.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tree/107.binary-tree-level-order-traversal-ii.cpp	/^int main(int argc, char **argv) {$/;"	f
main	tree/297.serialize-and-deserialize-binary-tree.cpp	/^int main() {$/;"	f
main	tree/449.serialize-and-deserialize-bst.cpp	/^int main (int argc, char **argv) {$/;"	f
main	tree/94.binary-tree-inorder-traversal.cpp	/^int main(int argc, char **argv) {$/;"	f
majorityElement	divide_and_conquer/169.majority-element.cpp	/^  int majorityElement(vector<int>& nums) {$/;"	f	class:Solution
map	hashtable/355.design-twitter.cpp	/^  std::unordered_map<int, User *> map;  \/\/ userid 与 User的对应关系$/;"	m	class:Twitter	file:
map_	Design/146.lru-cache.cpp	/^  std::unordered_map<int, node>   map_;   \/\/ 存储key， node*$/;"	m	class:LRUCache	file:
map_	Design/380.insert-delete-get-random-o-1.cpp	/^  std::unordered_map<int, int> map_;  \/\/ 存储元素与索引$/;"	m	class:RandomizedSet	file:
max	datastruct/239.sliding-window-maximum.cpp	/^    int max() const {$/;"	f	class:Solution::MonotonicQueue
max	datastruct/MonotonicQueue.cc	/^  int max() const {$/;"	f	class:MonotonicQueue
max	heap/designheap.cc	/^  int max() const {$/;"	f	class:MaxHeap
maxArea	array/11.container-with-most-water.cpp	/^  int maxArea(std::vector<int>& height) {$/;"	f	class:Solution
maxCoins	divide_and_conquer/312.burst-balloons.cpp	/^    int maxCoins(vector<int>& nums) {$/;"	f	class:Solution
maxCrossSum	divide_and_conquer/53.maximum-subarray.cpp	/^  int maxCrossSum(vector<int>& nums, int begin, int middle, int end) {$/;"	f	class:Solution	file:
maxDepth	tree/104.maximum-depth-of-binary-tree.cpp	/^    int maxDepth(TreeNode* root) {$/;"	f	class:Solution
maxDepth	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  int maxDepth(TreeNode *root) {$/;"	f	class:Solution	file:
maxDepth	tree/110.balanced-binary-tree.cpp	/^  int maxDepth(TreeNode* root) {$/;"	f	class:Solution	file:
maxEnvelopes	dp/354.russian-doll-envelopes.cpp	/^  int maxEnvelopes(std::vector<std::vector<int>> &envelopes) {$/;"	f	class:Solution
maxFreq	Design/895.maximum-frequency-stack.cpp	/^  int                                      maxFreq = 0;  \/\/ 最大频率$/;"	m	class:FreqStack	file:
maxPathSum	tree/124.binary-tree-maximum-path-sum.cpp	/^  int maxPathSum(TreeNode *root) {$/;"	f	class:Solution
maxPoints	hashtable/149.max-points-on-a-line.cpp	/^    int maxPoints(vector<vector<int>>& points) {$/;"	f	class:Solution
maxProfit	dp/121.best-time-to-buy-and-sell-stock.cpp	/^  int maxProfit(std::vector<int>& prices) {$/;"	f	class:Solution
maxProfit	dp/122.best-time-to-buy-and-sell-stock-ii.cpp	/^  int maxProfit(std::vector<int>& prices) {$/;"	f	class:Solution
maxProfit	dp/123.best-time-to-buy-and-sell-stock-iii.cpp	/^  int maxProfit(std::vector<int>& prices) {$/;"	f	class:Solution
maxProfit	dp/188.best-time-to-buy-and-sell-stock-iv.cpp	/^  int maxProfit(int k, std::vector<int>& prices) {$/;"	f	class:Solution
maxProfit	dp/309.best-time-to-buy-and-sell-stock-with-cooldown.cpp	/^  int maxProfit(std::vector<int>& prices) {$/;"	f	class:Solution
maxProfit	dp/714.best-time-to-buy-and-sell-stock-with-transaction-fee.cpp	/^  int maxProfit(std::vector<int>& prices, int fee) {$/;"	f	class:Solution
maxScoreSightseeingPair	divide_and_conquer/1014.best-sightseeing-pair.cpp	/^  int maxScoreSightseeingPair(vector<int>& A) {$/;"	f	class:Solution
maxSlidingWindow	datastruct/239.sliding-window-maximum.cpp	/^  std::vector<int> maxSlidingWindow(std::vector<int>& nums, int k) {$/;"	f	class:Solution
maxSubArray	divide_and_conquer/53.maximum-subarray.cpp	/^  int maxSubArray(vector<int>& nums) {$/;"	f	class:Solution
maxSubArray	divide_and_conquer/53.maximum-subarray.cpp	/^  int maxSubArray(vector<int>& nums, int begin, int end) {$/;"	f	class:Solution	file:
maxSum	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  int maxSum = 0;$/;"	m	class:Solution	file:
maxSumBST	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  int maxSumBST(TreeNode *root) {$/;"	f	class:Solution
maxpq	array/870.advantage-shuffle.cpp	/^      maxpq;$/;"	m	class:Solution	file:
memo	dp/337.house-robber-iii.cpp	/^  std::unordered_map<TreeNode *, int> memo;$/;"	m	class:Solution	file:
memo	dp/712.minimum-ascii-delete-sum-for-two-strings.cpp	/^  int memo(std::string                     s1,$/;"	f	class:Solution	file:
memo	tree/96.unique-binary-search-trees.cpp	/^  std::vector<std::vector<int>> memo;$/;"	m	class:Solution	file:
merge	array/88.merge-sorted-array.cpp	/^  void merge(std::vector<int>& nums1, int m, std::vector<int>& nums2, int n) {$/;"	f	class:Solution
merge	sort/493.reverse-pairs.cpp	/^  void merge(std::vector<int>& vec, int start, int mid, int end, int& count) {$/;"	f	class:Solution	file:
mergeKLists	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  ListNode* mergeKLists(vector<ListNode*>& lists) {$/;"	f	class:Solution
mergeKLists	link/23.merge-k-sorted-lists.cpp	/^  ListNode* mergeKLists(std::vector<ListNode*>& lists) {$/;"	f	class:Solution
mergeLists	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  ListNode* mergeLists(vector<ListNode*>& lists, int begin, int end) {$/;"	f	class:Solution	file:
mergeSort	sort/493.reverse-pairs.cpp	/^  void mergeSort(std::vector<int>& vec, int start, int end, int& count) {$/;"	f	class:Solution	file:
mergeTwoLists	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  ListNode* mergeTwoLists(ListNode* first, ListNode* second) {$/;"	f	class:Solution	file:
mergeTwoLists	link/148.sort-list.cpp	/^  ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution	file:
mergeTwoLists	link/21.merge-two-sorted-lists.cpp	/^  ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution
middleNode	link/876.middle-of-the-linked-list.cpp	/^  ListNode* middleNode(ListNode* head) {$/;"	f	class:Solution
minAreaRect	divide_and_conquer/939.minimum-area-rectangle.cpp	/^  int minAreaRect(vector<vector<int>>& points) {$/;"	f	class:Solution
minCameraCover	divide_and_conquer/968.binary-tree-cameras.cpp	/^  int minCameraCover(TreeNode *root) {$/;"	f	class:Solution
minDepth	tree/111.minimum-depth-of-binary-tree.cpp	/^  int minDepth(TreeNode *root) {$/;"	f	class:Solution
minDistance	dp/583.delete-operation-for-two-strings.cpp	/^  int minDistance(std::string word1, std::string word2) {$/;"	f	class:Solution
minDistance	dp/72.edit-distance.cpp	/^  int minDistance(std::string word1, std::string word2) {$/;"	f	class:Solution
minEatingSpeed	twopointer/875.koko-eating-bananas.cpp	/^  int minEatingSpeed(std::vector<int>& piles, int h) {$/;"	f	class:Solution
minPathSum	dp/64.minimum-path-sum.cpp	/^  int minPathSum(vector<vector<int>>& grid) {$/;"	f	class:Solution
minSubArrayLen	array/209.minimum-size-subarray-sum.cpp	/^  int minSubArrayLen(int target, std::vector<int>& nums) {$/;"	f	class:Solution
minWindow	hashtable/76.minimum-window-substring.cpp	/^  std::string minWindow(std::string s, std::string t) {$/;"	f	class:Solution
minimumDeleteSum	dp/712.minimum-ascii-delete-sum-for-two-strings.cpp	/^  int minimumDeleteSum(std::string s1, std::string s2) {$/;"	f	class:Solution
minimumTotal	dp/120.triangle.cpp	/^  int minimumTotal(vector<vector<int>>& triangle) {$/;"	f	class:Solution
minstack	stack/155.min-stack.cpp	/^  std::stack<int> minstack;$/;"	m	class:MinStack	file:
minusOne	BFS/752.open-the-lock.cpp	/^  std::string minusOne(std::string str, int j) {$/;"	f	class:Solution	file:
missingNumber	array/268.missing-number.cpp	/^  int missingNumber(std::vector<int>& nums) {$/;"	f	class:Solution
moveZeroes	array/283.move-zeroes.cpp	/^  void moveZeroes(std::vector<int>& nums) {$/;"	f	class:Solution
multiply	str/43.multiply-strings.cpp	/^  std::string multiply(std::string num1, std::string num2) {$/;"	f	class:Solution
mypow	math/372.super-pow.cpp	/^  int mypow(int a, int k) {$/;"	f	class:Solution	file:
n	datastruct/ExamRoom.cc	/^  int n;$/;"	m	class:ExamRoom	file:
next	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	hashtable/355.design-twitter.cpp	/^  Tweet *next;$/;"	m	struct:Tweet	file:
next	link/147.insertion-sort-list.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/160.intersection-of-two-linked-lists.cpp	/^  ListNode *next;$/;"	m	struct:ListNode	file:
next	link/19.remove-nth-node-from-end-of-list.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/21.merge-two-sorted-lists.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/23.merge-k-sorted-lists.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/234.palindrome-linked-list.cpp	/^  ListNode *next;$/;"	m	struct:ListNode	file:
next	link/25.reverse-nodes-in-k-group.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/61.rotate-list.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/83.remove-duplicates-from-sorted-list.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/876.middle-of-the-linked-list.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/92.reverse-linked-list-ii.cpp	/^  ListNode* next;$/;"	m	struct:ListNode	file:
next	link/linkNode.h	/^  ListNode *next;$/;"	m	struct:ListNode
next	random/382.linked-list-random-node.cpp	/^  ListNode *next;$/;"	m	struct:ListNode	file:
next	stack/341.flatten-nested-list-iterator.cpp	/^  int next() {$/;"	f	class:NestedIterator
next	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  Node* next;$/;"	m	class:Node	file:
next	tree/341.flatten-nested-list-iterator.cpp	/^  int next() {$/;"	f	class:NestedIterator
nextGreaterElement	datastruct/496.next-greater-element-i.cpp	/^  std::vector<int> nextGreaterElement(std::vector<int>& nums1,$/;"	f	class:Solution
nextGreaterElements	datastruct/503.next-greater-element-ii.cpp	/^  std::vector<int> nextGreaterElements(std::vector<int>& nums) {$/;"	f	class:Solution
nextPermutation	array/31.next-permutation.cpp	/^  void nextPermutation(std::vector<int>& nums) {$/;"	f	class:Solution
nextPermutation	array/31.next-permutation.cpp	/^  void nextPermutation(std::vector<int>::iterator begin,$/;"	f	class:Solution	file:
node	Design/146.lru-cache.cpp	/^  typedef std::list<std::pair<int, int>>::iterator node;$/;"	t	class:LRUCache	file:
numIslands	backtrace/200.number-of-islands.cpp	/^  int numIslands(vector<vector<char>>& grid) {$/;"	f	class:Solution
numSquares	dp/279.perfect-squares.cpp	/^  int numSquares(int n) {$/;"	f	class:Solution
numSquares	math/279.perfect-squares.cpp	/^  int numSquares(int n) {$/;"	f	class:Solution
numTrees	tree/96.unique-binary-search-trees.cpp	/^  int numTrees(int lo, int hi) {$/;"	f	class:Solution	file:
numTrees	tree/96.unique-binary-search-trees.cpp	/^  int numTrees(int n) {$/;"	f	class:Solution
numberOfBoomerangs	hashtable/447.number-of-boomerangs.cpp	/^  int numberOfBoomerangs(vector<pair<int, int>>& points) {$/;"	f	class:Solution	file:
numberOfBoomerangs	hashtable/447.number-of-boomerangs.cpp	/^  int numberOfBoomerangs(vector<vector<int>>& points) {$/;"	f	class:Solution
oddEvenList	link/328.odd-even-linked-list.cpp	/^  ListNode* oddEvenList(ListNode* head) {$/;"	f	class:Solution
openLock	BFS/752.open-the-lock.cpp	/^  int openLock(vector<string>& deadends, string target) {$/;"	f	class:Solution
operator ()	array/870.advantage-shuffle.cpp	/^    bool operator()(std::pair<int, int> a, std::pair<int, int> b) {$/;"	f	struct:Solution::greater
operator ()	datastruct/ExamRoom.cc	/^    bool operator()(std::pair<int, int> a, std::pair<int, int> b) {$/;"	f	struct:ExamRoom::less
operator ()	hashtable/355.design-twitter.cpp	/^    bool operator()(const Tweet *t1, const Tweet *t2) const {$/;"	f	struct:Twitter::less
operator ()	heap/295.find-median-from-data-stream.cpp	/^    bool operator()(const int &a, const int &b) const {$/;"	f	struct:MedianFinder::greator
operator ()	link/23.merge-k-sorted-lists.cpp	/^    bool operator()(const ListNode* t1, const ListNode* t2) {$/;"	f	struct:Solution::greater
palindrome	dp/5.longest-palindromic-substring.cpp	/^  std::string palindrome(std::string &s, int lo, int hi) {$/;"	f	class:Solution	file:
parent	UnionFind/Unionfind.cc	/^  std::vector<int> parent;  \/\/ 节点x的父节点为parent[x]$/;"	m	class:UF	file:
parent	heap/designheap.cc	/^  int parent(int root) {$/;"	f	class:MaxHeap
partition	backtrace/131.palindrome-partitioning.cpp	/^  vector<vector<string>> partition(string s) {$/;"	f	class:Solution
partition	backtrace/131.palindrome-partitioning.cpp	/^  void partition(string s, int start) {$/;"	f	class:Solution	file:
partition	link/86.partition-list.cpp	/^  ListNode* partition(ListNode* head, int x) {$/;"	f	class:Solution
path	array/39.combination-sum.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/131.palindrome-partitioning.cpp	/^  vector<string>         path;$/;"	m	class:Solution	file:
path	backtrace/216.combination-sum-iii.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/39.combination-sum.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/40.combination-sum-ii.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/46.permutations.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/47.permutations-ii.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/77.combinations.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/78.subsets.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
path	backtrace/90.subsets-ii.cpp	/^  vector<int>         path;$/;"	m	class:Solution	file:
pathSum	tree/113.path-sum-ii.cpp	/^  vector<vector<int>> pathSum(TreeNode* root, int targetSum) {$/;"	f	class:Solution
pathSum	tree/437.path-sum-iii.cpp	/^  int pathSum(TreeNode* root, int sum) {$/;"	f	class:Solution
peek	stack/232.implement-queue-using-stacks.cpp	/^  int peek() {$/;"	f	class:MyQueue
perm	backtrace/perm.cc	/^  std::vector<std::vector<int>> perm(std::vector<int> &nums) {$/;"	f	class:Solution
perm	backtrace/perm.cc	/^  void perm(std::vector<int> &nums, int i, std::vector<int> &tmp) {$/;"	f	class:Solution	file:
permute	backtrace/46.permutations.cpp	/^  vector<vector<int>> permute(vector<int>& nums) {$/;"	f	class:Solution
permute	backtrace/46.permutations.cpp	/^  void permute(vector<int>& nums, int index) {$/;"	f	class:Solution	file:
permuteUnique	backtrace/47.permutations-ii.cpp	/^  vector<vector<int>> permuteUnique(vector<int>& nums) {$/;"	f	class:Solution
permuteUnique	backtrace/47.permutations-ii.cpp	/^  void permuteUnique(vector<int>& nums, int index) {$/;"	f	class:Solution	file:
pick	random/398.random-pick-index.cpp	/^  int pick(int target) {$/;"	f	class:Solution
plusOne	BFS/752.open-the-lock.cpp	/^  std::string plusOne(std::string str, int j) {$/;"	f	class:Solution	file:
pop	Design/895.maximum-frequency-stack.cpp	/^  int pop() {$/;"	f	class:FreqStack
pop	stack/155.min-stack.cpp	/^  void pop() {$/;"	f	class:MinStack
pop	stack/225.implement_stack_using_queues.cpp	/^    int pop() {$/;"	f	class:MyStack
pop	stack/232.implement-queue-using-stacks.cpp	/^  int pop() {$/;"	f	class:MyQueue
popFirst	datastruct/239.sliding-window-maximum.cpp	/^    void popFirst(int n) {$/;"	f	class:Solution::MonotonicQueue
popFirst	datastruct/MonotonicQueue.cc	/^  void popFirst(int n) {$/;"	f	class:MonotonicQueue
post	hashtable/355.design-twitter.cpp	/^  void post(Tweet *tw) {$/;"	f	class:User
postTweet	hashtable/355.design-twitter.cpp	/^  void postTweet(int userId, int tweetId) {$/;"	f	class:Twitter
postorderTraversal	tree/145.binary-tree-postorder-traversal.cpp	/^  vector<int> postorderTraversal(TreeNode *root) {$/;"	f	class:Solution
postorderTraversal	tree/145.binary-tree-postorder-traversal.cpp	/^  void postorderTraversal(TreeNode *root, vector<int> &res) {$/;"	f	class:Solution	file:
pq	datastruct/ExamRoom.cc	/^  std::set<std::pair<int, int>, less> pq;$/;"	m	class:ExamRoom	file:
preorderTraversal	tree/144.binary-tree-preorder-traversal.cpp	/^  vector<int> preorderTraversal(TreeNode *root) {$/;"	f	class:Solution
preorderTraversal	tree/144.binary-tree-preorder-traversal.cpp	/^  void preorderTraversal(TreeNode *root, vector<int> &res) {$/;"	f	class:Solution	file:
print	Design/460.lfu-cache.cpp	/^  void print() {$/;"	f	class:LFUCache
print	divide_and_conquer/215.kth-largest-element-in-an-array.cpp	/^  void print(std::vector<int>& nums) {$/;"	f	class:Solution	file:
print	hashtable/349.intersection-of-two-arrays.cpp	/^void print(std::vector<int>& s) {$/;"	f
print	hashtable/350.intersection-of-two-arrays-ii.cpp	/^void print(std::vector<int>& s) {$/;"	f
print	hashtable/355.design-twitter.cpp	/^  void print() {$/;"	f	class:Twitter
print	hashtable/355.design-twitter.cpp	/^void print(std::vector<int> &nums) {$/;"	f
print	link/92.reverse-linked-list-ii.cpp	/^void print(ListNode* head) {$/;"	f
print	str/344.reverse-string.cpp	/^void print(std::vector<char>& s) {$/;"	f
push	Design/895.maximum-frequency-stack.cpp	/^  void push(int val) {$/;"	f	class:FreqStack
push	datastruct/239.sliding-window-maximum.cpp	/^    void push(int n) {$/;"	f	class:Solution::MonotonicQueue
push	datastruct/MonotonicQueue.cc	/^  void push(int n) {$/;"	f	class:MonotonicQueue
push	stack/155.min-stack.cpp	/^  void push(int x) {$/;"	f	class:MinStack
push	stack/225.implement_stack_using_queues.cpp	/^    void push(int x) {$/;"	f	class:MyStack
push	stack/232.implement-queue-using-stacks.cpp	/^  void push(int x) {$/;"	f	class:MyQueue
put	Design/146.lru-cache.cpp	/^  void put(int key, int value) {$/;"	f	class:LRUCache
put	Design/460.lfu-cache.cpp	/^  void put(int key, int value) {$/;"	f	class:LFUCache
qnxnto	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.21.4/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
que_	datastruct/239.sliding-window-maximum.cpp	/^    std::list<int> que_;$/;"	m	class:Solution::MonotonicQueue	file:
que_	datastruct/MonotonicQueue.cc	/^  std::list<int> que_;$/;"	m	class:MonotonicQueue	file:
rank	tree/230.kth-smallest-element-in-a-bst.cpp	/^  int rank;$/;"	m	class:Solution	file:
readBinaryWatch	backtrace/401.binary-watch.cpp	/^  vector<string> readBinaryWatch(int num) {$/;"	f	class:Solution
recoverTree	tree/99.recover-binary-search-tree.cpp	/^  void recoverTree(TreeNode *root) {$/;"	f	class:Solution
remove	Design/380.insert-delete-get-random-o-1.cpp	/^  bool remove(int val) {$/;"	f	class:RandomizedSet
removeDuplicateLetters	str/316.remove-duplicate-letters.cpp	/^  std::string removeDuplicateLetters(std::string s) {$/;"	f	class:Solution
removeDuplicates	array/26.remove-duplicates-from-sorted-array.cpp	/^  int removeDuplicates(std::vector<int>& nums) {$/;"	f	class:Solution
removeDuplicates	array/80.remove-duplicates-from-sorted-array-ii.cpp	/^  int removeDuplicates(std::vector<int>& nums) {$/;"	f	class:Solution
removeDuplicates	array/80.remove-duplicates-from-sorted-array-ii.cpp	/^  int removeDuplicates(std::vector<int>& nums, int k) {$/;"	f	class:Solution	file:
removeElement	array/27.remove-element.cpp	/^  int removeElement(std::vector<int>& nums, int val) {$/;"	f	class:Solution
removeElements	link/203.remove-linked-list-elements.cpp	/^  ListNode* removeElements(ListNode* head, int val) {$/;"	f	class:Solution
removeInterval	datastruct/ExamRoom.cc	/^  void removeInterval(std::pair<int, int> a) {$/;"	f	class:ExamRoom	file:
removeKeyFromkvMap	Design/460.lfu-cache.cpp	/^  void removeKeyFromkvMap() {$/;"	f	class:LFUCache	file:
removeNthFromEnd	link/19.remove-nth-node-from-end-of-list.cpp	/^  ListNode* removeNthFromEnd(ListNode* head, int n) {$/;"	f	class:Solution
res	array/39.combination-sum.cpp	/^  vector<vector<int>> res;$/;"	m	class:Solution	file:
res	backtrace/131.palindrome-partitioning.cpp	/^  vector<vector<string>> res;$/;"	m	class:Solution	file:
res	backtrace/39.combination-sum.cpp	/^  vector<vector<int>> res;$/;"	m	class:Solution	file:
res	backtrace/40.combination-sum-ii.cpp	/^  vector<vector<int>> res;$/;"	m	class:Solution	file:
res	backtrace/77.combinations.cpp	/^  vector<vector<int>> res;$/;"	m	class:Solution	file:
res	backtrace/93.restore-ip-addresses.cpp	/^  vector<string> res;$/;"	m	class:Solution	file:
res	backtrace/perm.cc	/^  std::vector<std::vector<int>> res;$/;"	m	class:Solution	file:
res	graph/797.all-paths-from-source-to-target.cpp	/^  std::vector<std::vector<int>> res;$/;"	m	class:Solution	file:
res	tree/230.kth-smallest-element-in-a-bst.cpp	/^  int res;$/;"	m	class:Solution	file:
res	tree/652.find-duplicate-subtrees.cpp	/^  std::vector<TreeNode *>              res;$/;"	m	class:Solution	file:
reserve	link/234.palindrome-linked-list.cpp	/^  ListNode *reserve(ListNode *head) {$/;"	f	class:Solution	file:
restoreIpAddresses	backtrace/93.restore-ip-addresses.cpp	/^  vector<string> restoreIpAddresses(string s) {$/;"	f	class:Solution
result	backtrace/216.combination-sum-iii.cpp	/^  vector<vector<int>> result;$/;"	m	class:Solution	file:
result	backtrace/46.permutations.cpp	/^  vector<vector<int>> result;$/;"	m	class:Solution	file:
result	backtrace/47.permutations-ii.cpp	/^  vector<vector<int>> result;$/;"	m	class:Solution	file:
result	backtrace/78.subsets.cpp	/^  vector<vector<int>> result;$/;"	m	class:Solution	file:
result	backtrace/90.subsets-ii.cpp	/^  vector<vector<int>> result;$/;"	m	class:Solution	file:
resver	link/AddTwoNumbers.cc	/^    ListNode *resver(ListNode* head){$/;"	f	class:Solution	file:
reverse	link/25.reverse-nodes-in-k-group.cpp	/^  ListNode* reverse(ListNode* a, ListNode* b) {$/;"	f	class:Solution	file:
reverseBetween	link/92.reverse-linked-list-ii.cpp	/^  ListNode* reverseBetween(ListNode* head, int m, int n) {$/;"	f	class:Solution
reverseKGroup	link/25.reverse-nodes-in-k-group.cpp	/^  ListNode* reverseKGroup(ListNode* head, int k) {$/;"	f	class:Solution
reverseList	link/206.reverse-linked-list.cpp	/^  ListNode* reverseList(ListNode* head) {$/;"	f	class:Solution
reversePairs	divide_and_conquer/493.reverse-pairs.cpp	/^  int reversePairs(vector<int>& nums) {$/;"	f	class:Solution
reversePairs	sort/493.reverse-pairs.cpp	/^  int reversePairs(vector<int>& nums) {$/;"	f	class:Solution
reverseString	str/344.reverse-string.cpp	/^  void reverseString(std::vector<char>& s) {$/;"	f	class:Solution
reverseVowels	str/345.reverse-vowels-of-a-string.cpp	/^  std::string reverseVowels(std::string s) {$/;"	f	class:Solution
right	divide_and_conquer/968.binary-tree-cameras.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	dp/337.house-robber-iii.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	heap/designheap.cc	/^  int right(int root) {$/;"	f	class:MaxHeap
right	tree/102.binary-tree-level-order-traversal.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/111.minimum-depth-of-binary-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/114.flatten-binary-tree-to-linked-list.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  Node* right;$/;"	m	class:Node	file:
right	tree/124.binary-tree-maximum-path-sum.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/222.count-complete-tree-nodes.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/226.invert-binary-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/230.kth-smallest-element-in-a-bst.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^  TreeNode* right;$/;"	m	struct:TreeNode	file:
right	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/449.serialize-and-deserialize-bst.cpp	/^  TreeNode* right;$/;"	m	struct:TreeNode	file:
right	tree/450.delete-node-in-a-bst.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/538.convert-bst-to-greater-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/652.find-duplicate-subtrees.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/654.maximum-binary-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/700.search-in-a-binary-search-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/701.insert-into-a-binary-search-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/94.binary-tree-inorder-traversal.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/95.unique-binary-search-trees-ii.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/98.validate-binary-search-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
right	tree/99.recover-binary-search-tree.cpp	/^  TreeNode *right;$/;"	m	struct:TreeNode	file:
rightSideView	tree/199.binary-tree-right-side-view.cpp	/^  vector<int> rightSideView(TreeNode* root) {$/;"	f	class:Solution
rob	dp/198.house-robber.cpp	/^  int rob(std::vector<int>& nums) {$/;"	f	class:Solution
rob	dp/213.house-robber-ii.cpp	/^  int rob(std::vector<int>& nums) {$/;"	f	class:Solution
rob	dp/213.house-robber-ii.cpp	/^  int rob(std::vector<int>& nums, int start, int end) {$/;"	f	class:Solution	file:
rob	dp/337.house-robber-iii.cpp	/^  int rob(TreeNode *root) {$/;"	f	class:Solution
rotateRight	link/61.rotate-list.cpp	/^  ListNode* rotateRight(ListNode* head, int k) {$/;"	f	class:Solution
search	array/33.search-in-rotated-sorted-array.cpp	/^  int search(std::vector<int>& nums, int target) {$/;"	f	class:Solution
searchBST	tree/700.search-in-a-binary-search-tree.cpp	/^  TreeNode *searchBST(TreeNode *root, int val) {$/;"	f	class:Solution
searchBoard	backtrace/79.word-search.cpp	/^  bool searchBoard(vector<vector<char>>& board, string word, int index,$/;"	f	class:Solution	file:
searchInsert	array/35.search-insert-position.cpp	/^  int searchInsert(vector<int>& nums, int target) {$/;"	f	class:Solution
searchMatrix	divide_and_conquer/240.search-a-2-d-matrix-ii.cpp	/^  bool searchMatrix(vector<vector<int>>& matrix, int target) {$/;"	f	class:Solution
searchRange	array/34.find-first-and-last-position-of-element-in-sorted-array.cpp	/^  vector<int> searchRange(vector<int>& nums, int target) {$/;"	f	class:Solution
seat	datastruct/ExamRoom.cc	/^  int seat() {$/;"	f	class:ExamRoom
serialize	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  std::string serialize(TreeNode *root) {$/;"	f	class:Codec
serialize	tree/449.serialize-and-deserialize-bst.cpp	/^  string serialize(TreeNode* root) {$/;"	f	class:Codec
shipWithinDays	twopointer/1011.capacity-to-ship-packages-within-d-days.cpp	/^  int shipWithinDays(std::vector<int>& weights, int days) {$/;"	f	class:Solution
simplifyPath	stack/71.simplify-path.cpp	/^  string simplifyPath(string path) {$/;"	f	class:Solution
sink	heap/designheap.cc	/^  void sink(int k) {$/;"	f	class:MaxHeap
small	heap/295.find-median-from-data-stream.cpp	/^  std::priority_queue<int, std::vector<int>, greator> small;  \/\/ 小根堆$/;"	m	class:MedianFinder	file:
smallestSubsequence	str/1081.smallest-subsequence-of-distinct-characters.cpp	/^  string smallestSubsequence(string s) {$/;"	f	class:Solution
solution	backtrace/93.restore-ip-addresses.cpp	/^  string         solution;$/;"	m	class:Solution	file:
solve	UnionFind/130.surrounded-regions.cpp	/^  void solve(std::vector<std::vector<char>>& board) {$/;"	f	class:Solution
sortColors	array/75.sort-colors.cpp	/^  void sortColors(std::vector<int>& nums) {$/;"	f	class:Solution
sortList	link/148.sort-list.cpp	/^  ListNode* sortList(ListNode* head) {$/;"	f	class:Solution
sortedArrayToBST	tree/108.convert-sorted-array-to-binary-search-tree.cpp	/^  TreeNode* sortedArrayToBST(vector<int>& nums) {$/;"	f	class:Solution
sortedArrayToBST	tree/108.convert-sorted-array-to-binary-search-tree.cpp	/^  TreeNode* sortedArrayToBST(vector<int>& nums, int start, int end) {$/;"	f	class:Solution	file:
spiralMatrixIII	datastruct/885.spiral-matrix-iii.cpp	/^  std::vector<std::vector<int>> spiralMatrixIII(int rows,$/;"	f	class:Solution
split	array/410.split-array-largest-sum.cpp	/^  int split(std::vector<int>& nums, int sum) {$/;"	f	class:Solution	file:
split	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  std::list<std::string> split(std::string data, char seq) {$/;"	f	class:Codec	file:
splitArray	array/410.split-array-largest-sum.cpp	/^  int splitArray(std::vector<int>& nums, int m) {$/;"	f	class:Solution
stack	stack/155.min-stack.cpp	/^  std::stack<int> stack;$/;"	m	class:MinStack	file:
startMap	datastruct/ExamRoom.cc	/^  std::map<int, std::pair<int, int>> startMap;$/;"	m	class:ExamRoom	file:
step	backtrace/200.number-of-islands.cpp	/^  int step[4][2] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};$/;"	m	class:Solution	file:
step	backtrace/79.word-search.cpp	/^  vector<vector<int>>  step = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};$/;"	m	class:Solution	file:
stoneGame	BFS/877.stone-game.cpp	/^  bool stoneGame(vector<int>& piles) {$/;"	f	class:Solution
strToInt	datastruct/calc.cc	/^int strToInt(std::string str) {$/;"	f
strsplit	tree/449.serialize-and-deserialize-bst.cpp	/^  list<string>& strsplit(string str, string sp) {$/;"	f	class:Codec	file:
subarraySum	array/560.subarray-sum-equals-k.cpp	/^  int subarraySum(std::vector<int>& nums, int k) {$/;"	f	class:Solution
subsets	backtrace/78.subsets.cpp	/^  vector<vector<int>> subsets(vector<int>& nums) {$/;"	f	class:Solution
subsets	backtrace/78.subsets.cpp	/^  void subsets(vector<int>& nums, int index) {$/;"	f	class:Solution	file:
subsetsWithDup	backtrace/90.subsets-ii.cpp	/^  vector<vector<int>> subsetsWithDup(vector<int>& nums) {$/;"	f	class:Solution
subsetsWithDup	backtrace/90.subsets-ii.cpp	/^  void subsetsWithDup(vector<int>& nums, int index) {$/;"	f	class:Solution	file:
sum	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  int sum;$/;"	m	class:Solution	file:
sum	tree/538.convert-bst-to-greater-tree.cpp	/^  int sum;$/;"	m	class:Solution	file:
sum	twopointer/1011.capacity-to-ship-packages-within-d-days.cpp	/^  int sum(std::vector<int>& weight) {$/;"	f	class:Solution	file:
sumNumbers	tree/129.sum-root-to-leaf-numbers.cpp	/^  int sumNumbers(TreeNode* root) {$/;"	f	class:Solution
sumOfLeftLeave	tree/404.sum-of-left-leaves.cpp	/^  int sumOfLeftLeave(TreeNode* root, bool isLeft = false) {$/;"	f	class:Solution	file:
sumOfLeftLeaves	tree/404.sum-of-left-leaves.cpp	/^  int sumOfLeftLeaves(TreeNode* root) {$/;"	f	class:Solution
superPow	math/372.super-pow.cpp	/^  int superPow(int a, std::vector<int>& b) {$/;"	f	class:Solution
swap	heap/designheap.cc	/^  void swap(int i, int j) {$/;"	f	class:MaxHeap
swapPairs	link/24.swap-nodes-in-pairs.cpp	/^  ListNode* swapPairs(ListNode* head) {$/;"	f	class:Solution
swim	heap/designheap.cc	/^  void swim(int k) {$/;"	f	class:MaxHeap
threeSum	array/15.3-sum.cpp	/^  std::vector<std::vector<int>> threeSum(std::vector<int> &nums) {$/;"	f	class:Solution
threeSum	array/15.3-sum.cpp	/^  void threeSum(std::vector<int> &             nums,$/;"	f	class:Solution	file:
threeSumClosest	array/16.3-sum-closest.cpp	/^  int threeSumClosest(vector<int>& nums, int target) {$/;"	f	class:Solution
time	twopointer/875.koko-eating-bananas.cpp	/^  int time(int n, int speed) {$/;"	f	class:Solution	file:
timeId	hashtable/355.design-twitter.cpp	/^  int    timeId;$/;"	m	struct:Tweet	file:
timeId	hashtable/355.design-twitter.cpp	/^  static int                      timeId;$/;"	m	class:Twitter	file:
timeId	hashtable/355.design-twitter.cpp	/^int Twitter::timeId = 1;$/;"	m	class:Twitter	file:
top	stack/155.min-stack.cpp	/^  int top() {$/;"	f	class:MinStack
top	stack/225.implement_stack_using_queues.cpp	/^    int top() {$/;"	f	class:MyStack
topKFrequent	stack/347.top-k-frequent-elements.cpp	/^  vector<int> topKFrequent(vector<int>& nums, int k) {$/;"	f	class:Solution
trap	array/42.trapping-rain-water.cpp	/^  int trap(std::vector<int>& height) {$/;"	f	class:Solution
traverse	graph/797.all-paths-from-source-to-target.cpp	/^  void traverse(std::vector<std::vector<int>> graph,$/;"	f	class:Solution	file:
traverse	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  void traverse(TreeNode *root) {$/;"	f	class:Solution	file:
traverse	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  std::vector<int> traverse(TreeNode *root) {$/;"	f	class:Solution	file:
traverse	tree/230.kth-smallest-element-in-a-bst.cpp	/^  void traverse(TreeNode *root, int k) {$/;"	f	class:Solution	file:
traverse	tree/538.convert-bst-to-greater-tree.cpp	/^  void traverse(TreeNode *root) {$/;"	f	class:Solution	file:
traverse	tree/652.find-duplicate-subtrees.cpp	/^  std::string traverse(TreeNode *root) {$/;"	f	class:Solution	file:
treeEdge	tree/129.sum-root-to-leaf-numbers.cpp	/^  vector<string> treeEdge(TreeNode* root) {$/;"	f	class:Solution	file:
treemap	tree/652.find-duplicate-subtrees.cpp	/^  std::unordered_map<std::string, int> treemap;$/;"	m	class:Solution	file:
tweetId	hashtable/355.design-twitter.cpp	/^  int    tweetId;$/;"	m	struct:Tweet	file:
twoSum	array/1.two-sum.cpp	/^  std::vector<int> twoSum(std::vector<int>& nums, int target) {$/;"	f	class:Solution
twoSum	array/167.two-sum-ii-input-array-is-sorted.cpp	/^  std::vector<int> twoSum(std::vector<int>& numbers, int target) {$/;"	f	class:Solution
unfllow	hashtable/355.design-twitter.cpp	/^  void unfllow(int userid) {$/;"	f	class:User
unfollow	hashtable/355.design-twitter.cpp	/^  void unfollow(int followerId, int followeeId) {$/;"	f	class:Twitter
uniquePaths	dp/62.unique-paths.cpp	/^  int uniquePaths(int m, int n) {$/;"	f	class:Solution
uniquePathsWithObstacles	dp/63.unique-paths-ii.cpp	/^  int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {$/;"	f	class:Solution
userId	hashtable/355.design-twitter.cpp	/^  int           userId;$/;"	m	class:User	file:
val	divide_and_conquer/23.merge-k-sorted-lists.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	divide_and_conquer/968.binary-tree-cameras.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	dp/337.house-robber-iii.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	link/147.insertion-sort-list.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/160.intersection-of-two-linked-lists.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/19.remove-nth-node-from-end-of-list.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/21.merge-two-sorted-lists.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/23.merge-k-sorted-lists.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/234.palindrome-linked-list.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/25.reverse-nodes-in-k-group.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/61.rotate-list.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/83.remove-duplicates-from-sorted-list.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/876.middle-of-the-linked-list.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/92.reverse-linked-list-ii.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	link/linkNode.h	/^  int val;$/;"	m	struct:ListNode
val	random/382.linked-list-random-node.cpp	/^  int       val;$/;"	m	struct:ListNode	file:
val	tree/102.binary-tree-level-order-traversal.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/1038.binary-search-tree-to-greater-sum-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/105.construct-binary-tree-from-preorder-and-inorder-traversal.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/106.construct-binary-tree-from-inorder-and-postorder-traversal.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/107.binary-tree-level-order-traversal-ii.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/111.minimum-depth-of-binary-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/114.flatten-binary-tree-to-linked-list.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/116.populating-next-right-pointers-in-each-node.cpp	/^  int   val;$/;"	m	class:Node	file:
val	tree/124.binary-tree-maximum-path-sum.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/1373.maximum-sum-bst-in-binary-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/222.count-complete-tree-nodes.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/226.invert-binary-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/230.kth-smallest-element-in-a-bst.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/236.lowest-common-ancestor-of-a-binary-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/297.serialize-and-deserialize-binary-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/449.serialize-and-deserialize-bst.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/450.delete-node-in-a-bst.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/538.convert-bst-to-greater-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/652.find-duplicate-subtrees.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/654.maximum-binary-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/700.search-in-a-binary-search-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/701.insert-into-a-binary-search-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/94.binary-tree-inorder-traversal.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/95.unique-binary-search-trees-ii.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/98.validate-binary-search-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
val	tree/99.recover-binary-search-tree.cpp	/^  int       val;$/;"	m	struct:TreeNode	file:
valToFreq	Design/895.maximum-frequency-stack.cpp	/^  std::unordered_map<int, int>             valToFreq;$/;"	m	class:FreqStack	file:
val_	Design/380.insert-delete-get-random-o-1.cpp	/^  std::vector<int>             val_;  \/\/ 存储元素$/;"	m	class:RandomizedSet	file:
visited	backtrace/40.combination-sum-ii.cpp	/^  vector<bool>        visited;$/;"	m	class:Solution	file:
visited	backtrace/46.permutations.cpp	/^  vector<bool>        visited;$/;"	m	class:Solution	file:
visited	backtrace/47.permutations-ii.cpp	/^  vector<bool>        visited;$/;"	m	class:Solution	file:
visited	backtrace/78.subsets.cpp	/^  vector<bool>        visited;$/;"	m	class:Solution	file:
visited	backtrace/79.word-search.cpp	/^  vector<vector<bool>> visited;$/;"	m	class:Solution	file:
visited	backtrace/90.subsets-ii.cpp	/^  vector<bool>        visited;$/;"	m	class:Solution	file:
volatile	build/CMakeFiles/3.21.4/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	file:
weight	UnionFind/Unionfind.cc	/^  std::vector<int> weight;  \/\/ 树的重量$/;"	m	class:UF	file:
wordPattern	hashtable/290.word-pattern.cpp	/^  bool wordPattern(string pattern, string s) {$/;"	f	class:Solution
